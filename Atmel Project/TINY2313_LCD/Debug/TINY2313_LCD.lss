
TINY2313_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800080  00800080  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000702  00000000  00000000  00001e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b4  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e8       	ldi	r30, 0x86	; 134
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 38       	cpi	r26, 0x85	; 133
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3b d1       	rcall	.+630    	; 0x2d0 <main>
  5a:	93 c1       	rjmp	.+806    	; 0x382 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <sendhalfbyte>:
  5e:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	9a e1       	ldi	r25, 0x1A	; 26
  62:	9a 95       	dec	r25
  64:	f1 f7       	brne	.-4      	; 0x62 <sendhalfbyte+0x4>
  66:	00 c0       	rjmp	.+0      	; 0x68 <sendhalfbyte+0xa>
  68:	92 b3       	in	r25, 0x12	; 18
  6a:	97 78       	andi	r25, 0x87	; 135
  6c:	92 bb       	out	0x12, r25	; 18
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	88 0f       	add	r24, r24
  72:	88 0f       	add	r24, r24
  74:	88 0f       	add	r24, r24
  76:	89 2b       	or	r24, r25
  78:	82 bb       	out	0x12, r24	; 18
  7a:	92 98       	cbi	0x12, 2	; 18
  7c:	8a e1       	ldi	r24, 0x1A	; 26
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <sendhalfbyte+0x20>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__DATA_REGION_LENGTH__+0x4>
  84:	08 95       	ret

00000086 <sendbyte>:
  86:	cf 93       	push	r28
  88:	c8 2f       	mov	r28, r24
  8a:	61 11       	cpse	r22, r1
  8c:	02 c0       	rjmp	.+4      	; 0x92 <sendbyte+0xc>
  8e:	91 98       	cbi	0x12, 1	; 18
  90:	01 c0       	rjmp	.+2      	; 0x94 <sendbyte+0xe>
  92:	91 9a       	sbi	0x12, 1	; 18
  94:	8c 2f       	mov	r24, r28
  96:	82 95       	swap	r24
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	e1 df       	rcall	.-62     	; 0x5e <sendhalfbyte>
  9c:	8c 2f       	mov	r24, r28
  9e:	df df       	rcall	.-66     	; 0x5e <sendhalfbyte>
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <sendcharlcd>:
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	ef df       	rcall	.-34     	; 0x86 <sendbyte>
  a8:	08 95       	ret

000000aa <setpos>:
  aa:	62 95       	swap	r22
  ac:	66 0f       	add	r22, r22
  ae:	66 0f       	add	r22, r22
  b0:	60 7c       	andi	r22, 0xC0	; 192
  b2:	86 0f       	add	r24, r22
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	e6 df       	rcall	.-52     	; 0x86 <sendbyte>
  ba:	08 95       	ret

000000bc <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e2       	ldi	r24, 0x2F	; 47
  be:	95 e7       	ldi	r25, 0x75	; 117
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_ini+0x4>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_ini+0xa>
  c6:	00 00       	nop
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	c9 df       	rcall	.-110    	; 0x5e <sendhalfbyte>
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9f e1       	ldi	r25, 0x1F	; 31
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_ini+0x14>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_ini+0x1a>
  d6:	00 00       	nop
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	c1 df       	rcall	.-126    	; 0x5e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__stack+0x1>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__stack+0x7>
  e6:	00 00       	nop
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	b9 df       	rcall	.-142    	; 0x5e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <__stack+0x11>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__stack+0x17>
  f6:	00 00       	nop
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	b1 df       	rcall	.-158    	; 0x5e <sendhalfbyte>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	bc df       	rcall	.-136    	; 0x86 <sendbyte>
 10e:	8f ec       	ldi	r24, 0xCF	; 207
 110:	97 e0       	ldi	r25, 0x07	; 7
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__stack+0x33>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__stack+0x39>
 118:	00 00       	nop
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	b3 df       	rcall	.-154    	; 0x86 <sendbyte>
 120:	8f ec       	ldi	r24, 0xCF	; 207
 122:	97 e0       	ldi	r25, 0x07	; 7
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__stack+0x45>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__stack+0x4b>
 12a:	00 00       	nop
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	aa df       	rcall	.-172    	; 0x86 <sendbyte>
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__stack+0x57>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__stack+0x5d>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <clearlcd>:
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	a0 df       	rcall	.-192    	; 0x86 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	87 ec       	ldi	r24, 0xC7	; 199
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <clearlcd+0xa>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <clearlcd+0x10>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <str_lcd>:
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <str_lcd+0x16>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	a0 df       	rcall	.-192    	; 0xa4 <sendcharlcd>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fc cf       	rjmp	.-8      	; 0x162 <str_lcd+0xe>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <port_ini>:
#include "main.h"
#include <stdlib.h>
//----------------------------------------
void port_ini(void)
{
	PORTD=0x00;
 170:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	81 bb       	out	0x11, r24	; 17
	PORTB=0x0F;
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	88 bb       	out	0x18, r24	; 24
	DDRB=0xF0;
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	87 bb       	out	0x17, r24	; 23
 17e:	08 95       	ret

00000180 <generate_title>:
char buffer[1];
char buffer_i[1];

void generate_title()
{
	clearlcd();
 180:	df df       	rcall	.-66     	; 0x140 <clearlcd>
	setpos(0,0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 df       	rcall	.-224    	; 0xaa <setpos>
	str_lcd("Timer by Titkov");
 18a:	82 e6       	ldi	r24, 0x62	; 98
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	e2 df       	rcall	.-60     	; 0x154 <str_lcd>
	setpos(0,1);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	89 df       	rcall	.-238    	; 0xaa <setpos>
	str_lcd("Time:");
 198:	82 e7       	ldi	r24, 0x72	; 114
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	db df       	rcall	.-74     	; 0x154 <str_lcd>
	setpos(9,1);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	89 e0       	ldi	r24, 0x09	; 9
 1a4:	82 df       	rcall	.-252    	; 0xaa <setpos>
	str_lcd("min.");
 1a6:	88 e7       	ldi	r24, 0x78	; 120
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	d4 df       	rcall	.-88     	; 0x154 <str_lcd>
 1ac:	08 95       	ret

000001ae <timer_start>:
}

void timer_start(char time)
{

	for (i = time; i >= 0; i--)
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	{		
		setpos(7, 1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	75 df       	rcall	.-278    	; 0xaa <setpos>
		
		if(i == 9)
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	09 97       	sbiw	r24, 0x09	; 9
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <timer_start+0x34>
		{
			setpos(8,1);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	6b df       	rcall	.-298    	; 0xaa <setpos>
			str_lcd(" ");
 1d4:	8d e7       	ldi	r24, 0x7D	; 125
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	bd df       	rcall	.-134    	; 0x154 <str_lcd>
			setpos(7, 1);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	64 df       	rcall	.-312    	; 0xaa <setpos>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1e2:	4a e0       	ldi	r20, 0x0A	; 10
 1e4:	63 e8       	ldi	r22, 0x83	; 131
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	95 d0       	rcall	.+298    	; 0x31c <__itoa_ncheck>
		}

		str_lcd(itoa(i, buffer_i, 10));
 1f2:	b0 df       	rcall	.-160    	; 0x154 <str_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	2f e7       	ldi	r18, 0x7F	; 127
 1f6:	8d e8       	ldi	r24, 0x8D	; 141
 1f8:	9b e5       	ldi	r25, 0x5B	; 91
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <timer_start+0x4c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <timer_start+0x56>
 204:	00 00       	nop
		_delay_ms(3750);
		
		if(!((PINB&0x04) == 0))
 206:	b2 9b       	sbis	0x16, 2	; 22
 208:	08 c0       	rjmp	.+16     	; 0x21a <timer_start+0x6c>
		{
			setpos(7,1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	4c df       	rcall	.-360    	; 0xaa <setpos>
			mode = 0;
 212:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
			generate_title();
 216:	b4 df       	rcall	.-152    	; 0x180 <generate_title>
			break;
 218:	0b c0       	rjmp	.+22     	; 0x230 <timer_start+0x82>
}

void timer_start(char time)
{

	for (i = time; i >= 0; i--)
 21a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 228:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 22c:	99 23       	and	r25, r25
 22e:	24 f6       	brge	.-120    	; 0x1b8 <timer_start+0xa>
			generate_title();
			break;
		}
	}
	
	setpos(7,1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	39 df       	rcall	.-398    	; 0xaa <setpos>
	mode = 0;
 238:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	generate_title();
 23c:	a1 df       	rcall	.-190    	; 0x180 <generate_title>
	button_Update();
 23e:	01 d0       	rcall	.+2      	; 0x242 <button_Update>
 240:	08 95       	ret

00000242 <button_Update>:
}

//Обработчик кнопок
void button_Update()
{
	if((PINB&0x01) == 0 && flagFirstButton == 0)
 242:	b0 99       	sbic	0x16, 0	; 22
 244:	18 c0       	rjmp	.+48     	; 0x276 <button_Update+0x34>
 246:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flagFirstButton>
 24a:	81 11       	cpse	r24, r1
 24c:	14 c0       	rjmp	.+40     	; 0x276 <button_Update+0x34>
	{
		mode++;
 24e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	98 0f       	add	r25, r24
 256:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__data_end>
		flagFirstButton = 1;
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <flagFirstButton>
		
		if(mode > 99 || mode <= 0)
 260:	83 36       	cpi	r24, 0x63	; 99
 262:	10 f0       	brcs	.+4      	; 0x268 <button_Update+0x26>
		mode = 0;
 264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
 268:	8f e2       	ldi	r24, 0x2F	; 47
 26a:	95 e7       	ldi	r25, 0x75	; 117
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <button_Update+0x2a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <button_Update+0x30>
 272:	00 00       	nop
 274:	08 95       	ret
		
		_delay_ms(15);
		

	}
	else if((PINB&0x02) == 0 && flagSecondButton == 0)
 276:	b1 99       	sbic	0x16, 1	; 22
 278:	19 c0       	rjmp	.+50     	; 0x2ac <button_Update+0x6a>
 27a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <flagSecondButton>
 27e:	81 11       	cpse	r24, r1
 280:	15 c0       	rjmp	.+42     	; 0x2ac <button_Update+0x6a>
	{
		mode--;
 282:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 286:	9f ef       	ldi	r25, 0xFF	; 255
 288:	98 0f       	add	r25, r24
 28a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__data_end>
		flagSecondButton = 1;
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <flagSecondButton>
		
		if(mode <= 0 || mode > 99)
 294:	82 50       	subi	r24, 0x02	; 2
 296:	83 36       	cpi	r24, 0x63	; 99
 298:	10 f0       	brcs	.+4      	; 0x29e <button_Update+0x5c>
		mode = 0;
 29a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
 29e:	8f e2       	ldi	r24, 0x2F	; 47
 2a0:	95 e7       	ldi	r25, 0x75	; 117
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <button_Update+0x60>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <button_Update+0x66>
 2a8:	00 00       	nop
 2aa:	08 95       	ret
		
		_delay_ms(15);
		

	}
	else if ((PINB&0x04) == 0)
 2ac:	b2 99       	sbic	0x16, 2	; 22
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <button_Update+0x84>
	{
		timer_start(mode);
 2b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	7b df       	rcall	.-266    	; 0x1ae <timer_start>
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	95 e7       	ldi	r25, 0x75	; 117
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <button_Update+0x7a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <button_Update+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret
		_delay_ms(15);
	}
	else
	{
		flagFirstButton = 0;
 2c6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <flagFirstButton>
		flagSecondButton = 0;
 2ca:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <flagSecondButton>
 2ce:	08 95       	ret

000002d0 <main>:
}

//Main
int main(void)
{
	port_ini(); //Инициализируем порты
 2d0:	4f df       	rcall	.-354    	; 0x170 <port_ini>
	LCD_ini();  //Инициализируем дисплей
 2d2:	f4 de       	rcall	.-536    	; 0xbc <LCD_ini>
	clearlcd();
 2d4:	35 df       	rcall	.-406    	; 0x140 <clearlcd>
	setpos(0,0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	e6 de       	rcall	.-564    	; 0xaa <setpos>
	str_lcd("Timer by Titkov");
 2de:	82 e6       	ldi	r24, 0x62	; 98
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	38 df       	rcall	.-400    	; 0x154 <str_lcd>
	setpos(0,1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	df de       	rcall	.-578    	; 0xaa <setpos>
	str_lcd("Time:");
 2ec:	82 e7       	ldi	r24, 0x72	; 114
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	31 df       	rcall	.-414    	; 0x154 <str_lcd>
	setpos(9,1);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	89 e0       	ldi	r24, 0x09	; 9
 2f8:	d8 de       	rcall	.-592    	; 0xaa <setpos>
	str_lcd("min.");
 2fa:	88 e7       	ldi	r24, 0x78	; 120
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	2a df       	rcall	.-428    	; 0x154 <str_lcd>
	
	while(1)
	{
		button_Update();
 300:	a0 df       	rcall	.-192    	; 0x242 <button_Update>
		setpos(7,1);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	d0 de       	rcall	.-608    	; 0xaa <setpos>
 30a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	64 e8       	ldi	r22, 0x84	; 132
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 d0       	rcall	.+4      	; 0x31c <__itoa_ncheck>
		str_lcd(itoa(mode, buffer, 10));
 318:	1d df       	rcall	.-454    	; 0x154 <str_lcd>
 31a:	f2 cf       	rjmp	.-28     	; 0x300 <main+0x30>

0000031c <__itoa_ncheck>:
 31c:	bb 27       	eor	r27, r27
 31e:	4a 30       	cpi	r20, 0x0A	; 10
 320:	31 f4       	brne	.+12     	; 0x32e <__itoa_ncheck+0x12>
 322:	99 23       	and	r25, r25
 324:	22 f4       	brpl	.+8      	; 0x32e <__itoa_ncheck+0x12>
 326:	bd e2       	ldi	r27, 0x2D	; 45
 328:	90 95       	com	r25
 32a:	81 95       	neg	r24
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	01 c0       	rjmp	.+2      	; 0x332 <__utoa_common>

00000330 <__utoa_ncheck>:
 330:	bb 27       	eor	r27, r27

00000332 <__utoa_common>:
 332:	fb 01       	movw	r30, r22
 334:	55 27       	eor	r21, r21
 336:	aa 27       	eor	r26, r26
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	aa 1f       	adc	r26, r26
 33e:	a4 17       	cp	r26, r20
 340:	10 f0       	brcs	.+4      	; 0x346 <__utoa_common+0x14>
 342:	a4 1b       	sub	r26, r20
 344:	83 95       	inc	r24
 346:	50 51       	subi	r21, 0x10	; 16
 348:	b9 f7       	brne	.-18     	; 0x338 <__utoa_common+0x6>
 34a:	a0 5d       	subi	r26, 0xD0	; 208
 34c:	aa 33       	cpi	r26, 0x3A	; 58
 34e:	08 f0       	brcs	.+2      	; 0x352 <__utoa_common+0x20>
 350:	a9 5d       	subi	r26, 0xD9	; 217
 352:	a1 93       	st	Z+, r26
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	79 f7       	brne	.-34     	; 0x336 <__utoa_common+0x4>
 358:	b1 11       	cpse	r27, r1
 35a:	b1 93       	st	Z+, r27
 35c:	11 92       	st	Z+, r1
 35e:	cb 01       	movw	r24, r22
 360:	00 c0       	rjmp	.+0      	; 0x362 <strrev>

00000362 <strrev>:
 362:	dc 01       	movw	r26, r24
 364:	fc 01       	movw	r30, r24
 366:	67 2f       	mov	r22, r23
 368:	71 91       	ld	r23, Z+
 36a:	77 23       	and	r23, r23
 36c:	e1 f7       	brne	.-8      	; 0x366 <strrev+0x4>
 36e:	32 97       	sbiw	r30, 0x02	; 2
 370:	04 c0       	rjmp	.+8      	; 0x37a <strrev+0x18>
 372:	7c 91       	ld	r23, X
 374:	6d 93       	st	X+, r22
 376:	70 83       	st	Z, r23
 378:	62 91       	ld	r22, -Z
 37a:	ae 17       	cp	r26, r30
 37c:	bf 07       	cpc	r27, r31
 37e:	c8 f3       	brcs	.-14     	; 0x372 <strrev+0x10>
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
