
Sigida.TriggerAttiny2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002b0  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ca  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060f  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000443  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 eb       	ldi	r30, 0xB0	; 176
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 36       	cpi	r26, 0x6A	; 106
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	c8 d0       	rcall	.+400    	; 0x1d6 <main>
  46:	32 c1       	rjmp	.+612    	; 0x2ac <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <CallTriigerRS>:
 *  Author: Denis Work
 */ 

#include "lib_trigger.h"

int CallTriigerRS (_Bool firstInput, _Bool secondInput, char firstOutput, char secondOutput, char* portState){
  4a:	0f 93       	push	r16
  4c:	1f 93       	push	r17
	
	if (firstInput && secondInput)
  4e:	88 23       	and	r24, r24
  50:	11 f0       	breq	.+4      	; 0x56 <CallTriigerRS+0xc>
  52:	61 11       	cpse	r22, r1
  54:	15 c0       	rjmp	.+42     	; 0x80 <__DATA_REGION_LENGTH__>
		*portState = *portState;
	else if (!firstInput && !secondInput)
  56:	81 11       	cpse	r24, r1
  58:	06 c0       	rjmp	.+12     	; 0x66 <CallTriigerRS+0x1c>
  5a:	61 11       	cpse	r22, r1
  5c:	04 c0       	rjmp	.+8      	; 0x66 <CallTriigerRS+0x1c>
	{
		*portState = 0b00110000;
  5e:	80 e3       	ldi	r24, 0x30	; 48
  60:	f8 01       	movw	r30, r16
  62:	80 83       	st	Z, r24
  64:	0d c0       	rjmp	.+26     	; 0x80 <__DATA_REGION_LENGTH__>

	}
	else if (firstInput && !secondInput)
  66:	88 23       	and	r24, r24
  68:	29 f0       	breq	.+10     	; 0x74 <CallTriigerRS+0x2a>
  6a:	61 11       	cpse	r22, r1
  6c:	03 c0       	rjmp	.+6      	; 0x74 <CallTriigerRS+0x2a>
		*portState = firstOutput;
  6e:	f8 01       	movw	r30, r16
  70:	40 83       	st	Z, r20
  72:	06 c0       	rjmp	.+12     	; 0x80 <__DATA_REGION_LENGTH__>
	else if (!firstInput && secondInput)
  74:	81 11       	cpse	r24, r1
  76:	04 c0       	rjmp	.+8      	; 0x80 <__DATA_REGION_LENGTH__>
  78:	66 23       	and	r22, r22
  7a:	11 f0       	breq	.+4      	; 0x80 <__DATA_REGION_LENGTH__>
		*portState = secondOutput;
  7c:	f8 01       	movw	r30, r16
  7e:	20 83       	st	Z, r18
}
  80:	1f 91       	pop	r17
  82:	0f 91       	pop	r16
  84:	08 95       	ret

00000086 <CallTriigerJK>:

int CallTriigerJK (_Bool firstInput, _Bool secondInput, char firstOutput, char secondOutput, char* portState){
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
	if (firstInput && secondInput) 
  8a:	88 23       	and	r24, r24
  8c:	11 f0       	breq	.+4      	; 0x92 <CallTriigerJK+0xc>
  8e:	61 11       	cpse	r22, r1
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__stack+0x3>
		*portState = *portState;
	else if (!firstInput && !secondInput)
  92:	81 11       	cpse	r24, r1
  94:	19 c0       	rjmp	.+50     	; 0xc8 <CallTriigerJK+0x42>
  96:	61 11       	cpse	r22, r1
  98:	17 c0       	rjmp	.+46     	; 0xc8 <CallTriigerJK+0x42>
	{
		*portState = firstOutput;
  9a:	f8 01       	movw	r30, r16
  9c:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ff e9       	ldi	r31, 0x9F	; 159
  a0:	36 e8       	ldi	r19, 0x86	; 134
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	f1 50       	subi	r31, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <CallTriigerJK+0x1e>
  ac:	00 c0       	rjmp	.+0      	; 0xae <CallTriigerJK+0x28>
  ae:	00 00       	nop
		_delay_ms(500);
		*portState = secondOutput;
  b0:	f8 01       	movw	r30, r16
  b2:	20 83       	st	Z, r18
  b4:	ff e9       	ldi	r31, 0x9F	; 159
  b6:	26 e8       	ldi	r18, 0x86	; 134
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	f1 50       	subi	r31, 0x01	; 1
  bc:	20 40       	sbci	r18, 0x00	; 0
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <CallTriigerJK+0x34>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <CallTriigerJK+0x3e>
  c4:	00 00       	nop
  c6:	0d c0       	rjmp	.+26     	; 0xe2 <__stack+0x3>
		_delay_ms(500);
		
	}
	else if (firstInput && !secondInput) 
  c8:	88 23       	and	r24, r24
  ca:	29 f0       	breq	.+10     	; 0xd6 <CallTriigerJK+0x50>
  cc:	61 11       	cpse	r22, r1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <CallTriigerJK+0x50>
		*portState = firstOutput;
  d0:	f8 01       	movw	r30, r16
  d2:	40 83       	st	Z, r20
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <__stack+0x3>
	else if (!firstInput && secondInput) 
  d6:	81 11       	cpse	r24, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__stack+0x3>
  da:	66 23       	and	r22, r22
  dc:	11 f0       	breq	.+4      	; 0xe2 <__stack+0x3>
		*portState = secondOutput;
  de:	f8 01       	movw	r30, r16
  e0:	20 83       	st	Z, r18
}
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <CallTriigerD>:

int CallTriigerD (_Bool firstInput, _Bool secondInput, char firstOutput, char secondOutput, char* portState){
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
	if (firstInput && secondInput) 
  ec:	88 23       	and	r24, r24
  ee:	11 f0       	breq	.+4      	; 0xf4 <CallTriigerD+0xc>
  f0:	61 11       	cpse	r22, r1
  f2:	0d c0       	rjmp	.+26     	; 0x10e <CallTriigerD+0x26>
		*portState = *portState;
	else if (!firstInput && !secondInput) 
  f4:	81 11       	cpse	r24, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <CallTriigerD+0x1a>
  f8:	61 11       	cpse	r22, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <CallTriigerD+0x1a>
		*portState = firstOutput;
  fc:	f8 01       	movw	r30, r16
  fe:	40 83       	st	Z, r20
 100:	06 c0       	rjmp	.+12     	; 0x10e <CallTriigerD+0x26>
	else if (firstInput && !secondInput) 
 102:	88 23       	and	r24, r24
 104:	21 f0       	breq	.+8      	; 0x10e <CallTriigerD+0x26>
 106:	61 11       	cpse	r22, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <CallTriigerD+0x26>
		*portState = secondOutput;
 10a:	f8 01       	movw	r30, r16
 10c:	20 83       	st	Z, r18
	else if (!firstInput && secondInput) 
		*portState = *portState;
}
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <CallTriigerT>:

int CallTriigerT (_Bool firstInput, char firstOutput, char secondOutput, char* portState){
	if(firstInput) 
 114:	88 23       	and	r24, r24
 116:	19 f0       	breq	.+6      	; 0x11e <CallTriigerT+0xa>
		*portState = firstOutput;
 118:	f9 01       	movw	r30, r18
 11a:	60 83       	st	Z, r22
 11c:	08 95       	ret
	else 
		*portState = secondOutput;
 11e:	f9 01       	movw	r30, r18
 120:	40 83       	st	Z, r20
}
 122:	08 95       	ret

00000124 <trigger_selection>:
//?????????? 1 ???? ??????? ??????, ?????????? 0 ???? ?????? ?? ???????
int trigger_selection (int * nameTrigger)
{
	do
	{
		if(RSTRIGGER) {*nameTrigger = "RS"; return 1;}
 124:	b0 99       	sbic	0x16, 0	; 22
 126:	08 c0       	rjmp	.+16     	; 0x138 <trigger_selection+0x14>
 128:	20 e6       	ldi	r18, 0x60	; 96
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	31 83       	std	Z+1, r19	; 0x01
 130:	20 83       	st	Z, r18
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret
		else if(JKTRIGGER) {*nameTrigger = "JK"; return 1;}
 138:	b1 99       	sbic	0x16, 1	; 22
 13a:	08 c0       	rjmp	.+16     	; 0x14c <trigger_selection+0x28>
 13c:	23 e6       	ldi	r18, 0x63	; 99
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	31 83       	std	Z+1, r19	; 0x01
 144:	20 83       	st	Z, r18
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
		else if(DTRIGGER) {*nameTrigger = "D"; return 1;}
 14c:	b2 99       	sbic	0x16, 2	; 22
 14e:	08 c0       	rjmp	.+16     	; 0x160 <trigger_selection+0x3c>
 150:	26 e6       	ldi	r18, 0x66	; 102
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	31 83       	std	Z+1, r19	; 0x01
 158:	20 83       	st	Z, r18
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
		else if(TTRIGGER) {*nameTrigger = "T"; return 1;}
 160:	b3 99       	sbic	0x16, 3	; 22
 162:	08 c0       	rjmp	.+16     	; 0x174 <trigger_selection+0x50>
 164:	28 e6       	ldi	r18, 0x68	; 104
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	31 83       	std	Z+1, r19	; 0x01
 16c:	20 83       	st	Z, r18
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
		else return 0;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
	} while (RSTRIGGER&JKTRIGGER&DTRIGGER&TTRIGGER==1);
}
 178:	08 95       	ret

0000017a <CheckButtonTriggres>:

int CheckButtonTriggres ()
{
	
	while ((RSTRIGGER) && (JKTRIGGER) || (TTRIGGER) && (DTRIGGER) || (JKTRIGGER) && (TTRIGGER) || (RSTRIGGER) && (DTRIGGER) || (DTRIGGER) && (JKTRIGGER))
 17a:	16 c0       	rjmp	.+44     	; 0x1a8 <CheckButtonTriggres+0x2e>
	{
		PORTB=0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	88 bb       	out	0x18, r24	; 24
 180:	eb e7       	ldi	r30, 0x7B	; 123
 182:	f2 e9       	ldi	r31, 0x92	; 146
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <CheckButtonTriggres+0xa>
 188:	00 c0       	rjmp	.+0      	; 0x18a <CheckButtonTriggres+0x10>
 18a:	00 00       	nop
		_delay_ms(150);
		PORTB=0x00;
 18c:	18 ba       	out	0x18, r1	; 24
 18e:	eb e7       	ldi	r30, 0x7B	; 123
 190:	f2 e9       	ldi	r31, 0x92	; 146
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <CheckButtonTriggres+0x18>
 196:	00 c0       	rjmp	.+0      	; 0x198 <CheckButtonTriggres+0x1e>
 198:	00 00       	nop
		_delay_ms(150);
		PORTB=0xFF;
 19a:	88 bb       	out	0x18, r24	; 24
 19c:	8b e7       	ldi	r24, 0x7B	; 123
 19e:	92 e9       	ldi	r25, 0x92	; 146
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <CheckButtonTriggres+0x26>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <CheckButtonTriggres+0x2c>
 1a6:	00 00       	nop
}

int CheckButtonTriggres ()
{
	
	while ((RSTRIGGER) && (JKTRIGGER) || (TTRIGGER) && (DTRIGGER) || (JKTRIGGER) && (TTRIGGER) || (RSTRIGGER) && (DTRIGGER) || (DTRIGGER) && (JKTRIGGER))
 1a8:	b0 99       	sbic	0x16, 0	; 22
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <CheckButtonTriggres+0x36>
 1ac:	b1 9b       	sbis	0x16, 1	; 22
 1ae:	e6 cf       	rjmp	.-52     	; 0x17c <CheckButtonTriggres+0x2>
 1b0:	b3 99       	sbic	0x16, 3	; 22
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <CheckButtonTriggres+0x3e>
 1b4:	b2 9b       	sbis	0x16, 2	; 22
 1b6:	e2 cf       	rjmp	.-60     	; 0x17c <CheckButtonTriggres+0x2>
 1b8:	b1 99       	sbic	0x16, 1	; 22
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <CheckButtonTriggres+0x46>
 1bc:	b3 9b       	sbis	0x16, 3	; 22
 1be:	de cf       	rjmp	.-68     	; 0x17c <CheckButtonTriggres+0x2>
 1c0:	b0 99       	sbic	0x16, 0	; 22
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <CheckButtonTriggres+0x4e>
 1c4:	b2 9b       	sbis	0x16, 2	; 22
 1c6:	da cf       	rjmp	.-76     	; 0x17c <CheckButtonTriggres+0x2>
 1c8:	b2 99       	sbic	0x16, 2	; 22
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <CheckButtonTriggres+0x56>
 1cc:	b1 9b       	sbis	0x16, 1	; 22
 1ce:	d6 cf       	rjmp	.-84     	; 0x17c <CheckButtonTriggres+0x2>
		PORTB=0xFF;
		_delay_ms(150);
	}
	
	return 1;
}
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret

000001d6 <main>:
#define D_BUTTON (PIND&0x10)==0
#define C_BUTTON (PIND&0x20)==0
#define T_BUTTON (PIND&0x40)==0

int main(void)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	dd 27       	eor	r29, r29
	PORTD=0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;
 1e4:	11 ba       	out	0x11, r1	; 17
	PORTB=0x0F;
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	88 bb       	out	0x18, r24	; 24
	DDRB=0xF0;
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	87 bb       	out	0x17, r24	; 23
 1ee:	53 c0       	rjmp	.+166    	; 0x296 <main+0xc0>
	{
		char chooseTrigger;
		
		while (trigger_selection(&chooseTrigger) && CheckButtonTriggres())
		{
			if (chooseTrigger=="RS"){
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	80 36       	cpi	r24, 0x60	; 96
 1f8:	92 07       	cpc	r25, r18
 1fa:	71 f4       	brne	.+28     	; 0x218 <main+0x42>
				CallTriigerRS(R_BUTTON,S_BUTTON,LED_R,LED_S,&PORTB);
 1fc:	60 b3       	in	r22, 0x10	; 16
 1fe:	90 b3       	in	r25, 0x10	; 16
 200:	66 95       	lsr	r22
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	68 27       	eor	r22, r24
 206:	61 70       	andi	r22, 0x01	; 1
 208:	89 27       	eor	r24, r25
 20a:	08 e3       	ldi	r16, 0x38	; 56
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	20 e2       	ldi	r18, 0x20	; 32
 210:	40 e1       	ldi	r20, 0x10	; 16
 212:	81 70       	andi	r24, 0x01	; 1
 214:	1a df       	rcall	.-460    	; 0x4a <CallTriigerRS>
 216:	3f c0       	rjmp	.+126    	; 0x296 <main+0xc0>
				}else if (chooseTrigger=="JK"){
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	83 36       	cpi	r24, 0x63	; 99
 21c:	92 07       	cpc	r25, r18
 21e:	91 f4       	brne	.+36     	; 0x244 <main+0x6e>
				CallTriigerJK(J_BUTTON,K_BUTTON,LED_J, LED_K,&PORTB);
 220:	60 b3       	in	r22, 0x10	; 16
 222:	80 b3       	in	r24, 0x10	; 16
 224:	66 95       	lsr	r22
 226:	66 95       	lsr	r22
 228:	66 95       	lsr	r22
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	69 27       	eor	r22, r25
 22e:	61 70       	andi	r22, 0x01	; 1
 230:	86 95       	lsr	r24
 232:	86 95       	lsr	r24
 234:	89 27       	eor	r24, r25
 236:	08 e3       	ldi	r16, 0x38	; 56
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	20 e6       	ldi	r18, 0x60	; 96
 23c:	40 e4       	ldi	r20, 0x40	; 64
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	22 df       	rcall	.-444    	; 0x86 <CallTriigerJK>
 242:	29 c0       	rjmp	.+82     	; 0x296 <main+0xc0>
				}else if (chooseTrigger=="D"){
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	86 36       	cpi	r24, 0x66	; 102
 248:	92 07       	cpc	r25, r18
 24a:	91 f4       	brne	.+36     	; 0x270 <main+0x9a>
				CallTriigerD(D_BUTTON,C_BUTTON,LED_D,LED_C,&PORTB);
 24c:	60 b3       	in	r22, 0x10	; 16
 24e:	80 b3       	in	r24, 0x10	; 16
 250:	62 95       	swap	r22
 252:	66 95       	lsr	r22
 254:	67 70       	andi	r22, 0x07	; 7
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	69 27       	eor	r22, r25
 25a:	61 70       	andi	r22, 0x01	; 1
 25c:	82 95       	swap	r24
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	89 27       	eor	r24, r25
 262:	08 e3       	ldi	r16, 0x38	; 56
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	20 ea       	ldi	r18, 0xA0	; 160
 268:	40 e8       	ldi	r20, 0x80	; 128
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	3d df       	rcall	.-390    	; 0xe8 <CallTriigerD>
 26e:	13 c0       	rjmp	.+38     	; 0x296 <main+0xc0>
				}else if (chooseTrigger=="T"){
 270:	88 56       	subi	r24, 0x68	; 104
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	79 f4       	brne	.+30     	; 0x294 <main+0xbe>
				CallTriigerT(T_BUTTON, LED_T,LED_T2,&PORTB);
 276:	80 b3       	in	r24, 0x10	; 16
 278:	98 2f       	mov	r25, r24
 27a:	92 95       	swap	r25
 27c:	96 95       	lsr	r25
 27e:	96 95       	lsr	r25
 280:	93 70       	andi	r25, 0x03	; 3
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 27       	eor	r24, r25
 286:	28 e3       	ldi	r18, 0x38	; 56
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 ee       	ldi	r20, 0xE0	; 224
 28c:	60 ec       	ldi	r22, 0xC0	; 192
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	41 df       	rcall	.-382    	; 0x114 <CallTriigerT>
 292:	01 c0       	rjmp	.+2      	; 0x296 <main+0xc0>
			}else PORTB = 0x00;
 294:	18 ba       	out	0x18, r1	; 24

	while (1)
	{
		char chooseTrigger;
		
		while (trigger_selection(&chooseTrigger) && CheckButtonTriggres())
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	44 df       	rcall	.-376    	; 0x124 <trigger_selection>
 29c:	89 2b       	or	r24, r25
 29e:	21 f0       	breq	.+8      	; 0x2a8 <main+0xd2>
 2a0:	6c df       	rcall	.-296    	; 0x17a <CheckButtonTriggres>
 2a2:	89 2b       	or	r24, r25
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <main+0xd2>
 2a6:	a4 cf       	rjmp	.-184    	; 0x1f0 <main+0x1a>
				}else if (chooseTrigger=="T"){
				CallTriigerT(T_BUTTON, LED_T,LED_T2,&PORTB);
			}else PORTB = 0x00;
		}
		
		PORTB = 0x00;
 2a8:	18 ba       	out	0x18, r1	; 24
	}
 2aa:	f5 cf       	rjmp	.-22     	; 0x296 <main+0xc0>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
