
Sigida.Triggers_Atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4a  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000630  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fe  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	d6 d0       	rcall	.+428    	; 0x1f6 <main>
  4a:	3c c1       	rjmp	.+632    	; 0x2c4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <CallTriigerRS>:


_Bool CallTriigerRS (_Bool firstInput, _Bool secondInput){
	
	//
	return (!(firstInput&(!(secondInput&&firstInput)))&(!(secondInput&(!(firstInput&&secondInput)))));
  4e:	28 2f       	mov	r18, r24
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	66 23       	and	r22, r22
  54:	29 f0       	breq	.+10     	; 0x60 <CallTriigerRS+0x12>
  56:	81 11       	cpse	r24, r1
  58:	06 c0       	rjmp	.+12     	; 0x66 <CallTriigerRS+0x18>
  5a:	41 e0       	ldi	r20, 0x01	; 1
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	05 c0       	rjmp	.+10     	; 0x6a <CallTriigerRS+0x1c>
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <CallTriigerRS+0x1c>
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	24 23       	and	r18, r20
  6c:	35 23       	and	r19, r21
  6e:	91 e0       	ldi	r25, 0x01	; 1
  70:	23 2b       	or	r18, r19
  72:	09 f0       	breq	.+2      	; 0x76 <CallTriigerRS+0x28>
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	26 2f       	mov	r18, r22
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	88 23       	and	r24, r24
  7c:	29 f0       	breq	.+10     	; 0x88 <CallTriigerRS+0x3a>
  7e:	61 11       	cpse	r22, r1
  80:	06 c0       	rjmp	.+12     	; 0x8e <CallTriigerRS+0x40>
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	05 c0       	rjmp	.+10     	; 0x92 <CallTriigerRS+0x44>
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	50 e0       	ldi	r21, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <CallTriigerRS+0x44>
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	24 23       	and	r18, r20
  94:	35 23       	and	r19, r21
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	23 2b       	or	r18, r19
  9a:	09 f0       	breq	.+2      	; 0x9e <CallTriigerRS+0x50>
  9c:	80 e0       	ldi	r24, 0x00	; 0
}
  9e:	89 23       	and	r24, r25
  a0:	08 95       	ret

000000a2 <CallTriigerJK>:

int CallTriigerJK (_Bool firstInput, _Bool secondInput, char firstOutput, char secondOutput, char* portState){
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	//????? ??????????
	if (firstInput && secondInput) *portState = *portState;
  a6:	88 23       	and	r24, r24
  a8:	11 f0       	breq	.+4      	; 0xae <CallTriigerJK+0xc>
  aa:	61 11       	cpse	r22, r1
  ac:	28 c0       	rjmp	.+80     	; 0xfe <CallTriigerJK+0x5c>
	//????? ???????
	else if (!firstInput && !secondInput)
  ae:	81 11       	cpse	r24, r1
  b0:	19 c0       	rjmp	.+50     	; 0xe4 <CallTriigerJK+0x42>
  b2:	61 11       	cpse	r22, r1
  b4:	17 c0       	rjmp	.+46     	; 0xe4 <CallTriigerJK+0x42>
	{
		*portState = firstOutput;
  b6:	f8 01       	movw	r30, r16
  b8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ff e3       	ldi	r31, 0x3F	; 63
  bc:	3d e0       	ldi	r19, 0x0D	; 13
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	f1 50       	subi	r31, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <CallTriigerJK+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <CallTriigerJK+0x28>
  ca:	00 00       	nop
		_delay_ms(1000);
		*portState = secondOutput;
  cc:	f8 01       	movw	r30, r16
  ce:	20 83       	st	Z, r18
  d0:	ff e3       	ldi	r31, 0x3F	; 63
  d2:	2d e0       	ldi	r18, 0x0D	; 13
  d4:	33 e0       	ldi	r19, 0x03	; 3
  d6:	f1 50       	subi	r31, 0x01	; 1
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <CallTriigerJK+0x34>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <CallTriigerJK+0x3e>
  e0:	00 00       	nop
  e2:	0d c0       	rjmp	.+26     	; 0xfe <CallTriigerJK+0x5c>
		_delay_ms(1000);
		
	}
	//????? ?????????
	else if (firstInput && !secondInput) *portState = firstOutput;
  e4:	88 23       	and	r24, r24
  e6:	29 f0       	breq	.+10     	; 0xf2 <CallTriigerJK+0x50>
  e8:	61 11       	cpse	r22, r1
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <CallTriigerJK+0x50>
  ec:	f8 01       	movw	r30, r16
  ee:	40 83       	st	Z, r20
  f0:	06 c0       	rjmp	.+12     	; 0xfe <CallTriigerJK+0x5c>
	//????? ??????
	else if (!firstInput && secondInput) *portState = secondOutput;
  f2:	81 11       	cpse	r24, r1
  f4:	04 c0       	rjmp	.+8      	; 0xfe <CallTriigerJK+0x5c>
  f6:	66 23       	and	r22, r22
  f8:	11 f0       	breq	.+4      	; 0xfe <CallTriigerJK+0x5c>
  fa:	f8 01       	movw	r30, r16
  fc:	20 83       	st	Z, r18
}
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <CallTriigerD>:

int CallTriigerD (_Bool firstInput, _Bool secondInput, char firstOutput, char secondOutput, char* portState){
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
	//????? ??????????
	if (firstInput && secondInput) *portState = *portState;
 108:	88 23       	and	r24, r24
 10a:	11 f0       	breq	.+4      	; 0x110 <CallTriigerD+0xc>
 10c:	61 11       	cpse	r22, r1
 10e:	0d c0       	rjmp	.+26     	; 0x12a <CallTriigerD+0x26>
	//????? ?????????
	else if (!firstInput && !secondInput) *portState = firstOutput;
 110:	81 11       	cpse	r24, r1
 112:	05 c0       	rjmp	.+10     	; 0x11e <CallTriigerD+0x1a>
 114:	61 11       	cpse	r22, r1
 116:	03 c0       	rjmp	.+6      	; 0x11e <CallTriigerD+0x1a>
 118:	f8 01       	movw	r30, r16
 11a:	40 83       	st	Z, r20
 11c:	06 c0       	rjmp	.+12     	; 0x12a <CallTriigerD+0x26>
	//????? ??????
	else if (firstInput && !secondInput) *portState = secondOutput;
 11e:	88 23       	and	r24, r24
 120:	21 f0       	breq	.+8      	; 0x12a <CallTriigerD+0x26>
 122:	61 11       	cpse	r22, r1
 124:	02 c0       	rjmp	.+4      	; 0x12a <CallTriigerD+0x26>
 126:	f8 01       	movw	r30, r16
 128:	20 83       	st	Z, r18
	//????? ??????????
	else if (!firstInput && secondInput) *portState = *portState;
}
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <CallTriigerT>:

int CallTriigerT (_Bool firstInput, char firstOutput, char secondOutput, char* portState){
	//????? ?????????
	if(firstInput) *portState = firstOutput;
 130:	88 23       	and	r24, r24
 132:	19 f0       	breq	.+6      	; 0x13a <CallTriigerT+0xa>
 134:	f9 01       	movw	r30, r18
 136:	60 83       	st	Z, r22
 138:	08 95       	ret
	//????? ??????
	else *portState = secondOutput;
 13a:	f9 01       	movw	r30, r18
 13c:	40 83       	st	Z, r20
}
 13e:	08 95       	ret

00000140 <reload>:

void reload ()
{
	PORTB=0x00;
 140:	18 ba       	out	0x18, r1	; 24
 142:	08 95       	ret

00000144 <trigger_selection>:
{
	//???? ????????? ????? ??????? ??????, ???? ???????? ?? ??? ???
	//???? ???? ?? ????????? ?? ???????.
	do
	{
		if(RSTRIGGER) {*nameTrigger = "RS"; return 1;}
 144:	98 99       	sbic	0x13, 0	; 19
 146:	08 c0       	rjmp	.+16     	; 0x158 <trigger_selection+0x14>
 148:	20 e6       	ldi	r18, 0x60	; 96
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
		else if(JKTRIGGER) {*nameTrigger = "JK"; return 1;}
 158:	99 99       	sbic	0x13, 1	; 19
 15a:	08 c0       	rjmp	.+16     	; 0x16c <trigger_selection+0x28>
 15c:	23 e6       	ldi	r18, 0x63	; 99
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	31 83       	std	Z+1, r19	; 0x01
 164:	20 83       	st	Z, r18
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
		else if(DTRIGGER) {*nameTrigger = "D"; return 1;}
 16c:	9a 99       	sbic	0x13, 2	; 19
 16e:	08 c0       	rjmp	.+16     	; 0x180 <trigger_selection+0x3c>
 170:	26 e6       	ldi	r18, 0x66	; 102
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	31 83       	std	Z+1, r19	; 0x01
 178:	20 83       	st	Z, r18
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
		else if(TTRIGGER) {*nameTrigger = "T"; return 1;}
 180:	9b 99       	sbic	0x13, 3	; 19
 182:	08 c0       	rjmp	.+16     	; 0x194 <trigger_selection+0x50>
 184:	28 e6       	ldi	r18, 0x68	; 104
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	31 83       	std	Z+1, r19	; 0x01
 18c:	20 83       	st	Z, r18
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret
		else return 0;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
	} while (RSTRIGGER&JKTRIGGER&DTRIGGER&TTRIGGER==1);
}
 198:	08 95       	ret

0000019a <CheckButtonTriggres>:

int CheckButtonTriggres ()
{
	
	while ((RSTRIGGER) && (JKTRIGGER) || (TTRIGGER) && (DTRIGGER) || (JKTRIGGER) && (TTRIGGER) || (RSTRIGGER) && (DTRIGGER) || (DTRIGGER) && (JKTRIGGER))
 19a:	16 c0       	rjmp	.+44     	; 0x1c8 <CheckButtonTriggres+0x2e>
	{
		PORTB=0xFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	eb e7       	ldi	r30, 0x7B	; 123
 1a2:	f2 e9       	ldi	r31, 0x92	; 146
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <CheckButtonTriggres+0xa>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <CheckButtonTriggres+0x10>
 1aa:	00 00       	nop
		_delay_ms(150);
		PORTB=0x00;
 1ac:	18 ba       	out	0x18, r1	; 24
 1ae:	eb e7       	ldi	r30, 0x7B	; 123
 1b0:	f2 e9       	ldi	r31, 0x92	; 146
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <CheckButtonTriggres+0x18>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <CheckButtonTriggres+0x1e>
 1b8:	00 00       	nop
		_delay_ms(150);
		PORTB=0xFF;
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	8b e7       	ldi	r24, 0x7B	; 123
 1be:	92 e9       	ldi	r25, 0x92	; 146
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <CheckButtonTriggres+0x26>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <CheckButtonTriggres+0x2c>
 1c6:	00 00       	nop
}

int CheckButtonTriggres ()
{
	
	while ((RSTRIGGER) && (JKTRIGGER) || (TTRIGGER) && (DTRIGGER) || (JKTRIGGER) && (TTRIGGER) || (RSTRIGGER) && (DTRIGGER) || (DTRIGGER) && (JKTRIGGER))
 1c8:	98 99       	sbic	0x13, 0	; 19
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <CheckButtonTriggres+0x36>
 1cc:	99 9b       	sbis	0x13, 1	; 19
 1ce:	e6 cf       	rjmp	.-52     	; 0x19c <CheckButtonTriggres+0x2>
 1d0:	9b 99       	sbic	0x13, 3	; 19
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <CheckButtonTriggres+0x3e>
 1d4:	9a 9b       	sbis	0x13, 2	; 19
 1d6:	e2 cf       	rjmp	.-60     	; 0x19c <CheckButtonTriggres+0x2>
 1d8:	99 99       	sbic	0x13, 1	; 19
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <CheckButtonTriggres+0x46>
 1dc:	9b 9b       	sbis	0x13, 3	; 19
 1de:	de cf       	rjmp	.-68     	; 0x19c <CheckButtonTriggres+0x2>
 1e0:	98 99       	sbic	0x13, 0	; 19
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <CheckButtonTriggres+0x4e>
 1e4:	9a 9b       	sbis	0x13, 2	; 19
 1e6:	da cf       	rjmp	.-76     	; 0x19c <CheckButtonTriggres+0x2>
 1e8:	9a 99       	sbic	0x13, 2	; 19
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <CheckButtonTriggres+0x56>
 1ec:	99 9b       	sbis	0x13, 1	; 19
 1ee:	d6 cf       	rjmp	.-84     	; 0x19c <CheckButtonTriggres+0x2>
		PORTB=0xFF;
		_delay_ms(150);
	}
	
	return 1;
}
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <main>:
#define D_BUTTON (PIND&0x10)==0
#define C_BUTTON (PIND&0x20)==0
#define T_BUTTON (PIND&0x40)==0

int main(void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	//???????????? ?????? I/O
	PORTB=0x00;
 200:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	87 bb       	out	0x17, r24	; 23
	PORTD=0xFF;
 206:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;
 208:	11 ba       	out	0x11, r1	; 17
	PORTC=0xFF;
 20a:	85 bb       	out	0x15, r24	; 21
	DDRC=0x00;
 20c:	14 ba       	out	0x14, r1	; 20
 20e:	4f c0       	rjmp	.+158    	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
		//???? ?????? ????????, ????????? ????? ??????? ??? ??????
		//? ?? ???????? ?? ??? ???????? ????????????, ???? ?? ????
		//??????? ?? ????????, ?? ????????? ???????????.
		while (trigger_selection(&chooseTrigger) && CheckButtonTriggres())
		{
			if (chooseTrigger=="RS"){
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	80 36       	cpi	r24, 0x60	; 96
 218:	92 07       	cpc	r25, r18
 21a:	59 f4       	brne	.+22     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
				PORTB = CallTriigerRS(R_BUTTON,S_BUTTON);
 21c:	60 b3       	in	r22, 0x10	; 16
 21e:	90 b3       	in	r25, 0x10	; 16
 220:	66 95       	lsr	r22
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	68 27       	eor	r22, r24
 226:	61 70       	andi	r22, 0x01	; 1
 228:	89 27       	eor	r24, r25
 22a:	81 70       	andi	r24, 0x01	; 1
 22c:	10 df       	rcall	.-480    	; 0x4e <CallTriigerRS>
 22e:	88 bb       	out	0x18, r24	; 24
 230:	3e c0       	rjmp	.+124    	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
			}else if (chooseTrigger=="JK"){
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	83 36       	cpi	r24, 0x63	; 99
 236:	92 07       	cpc	r25, r18
 238:	91 f4       	brne	.+36     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
				CallTriigerJK(J_BUTTON,K_BUTTON,0b00000100,0b00001000,&PORTB);
 23a:	60 b3       	in	r22, 0x10	; 16
 23c:	80 b3       	in	r24, 0x10	; 16
 23e:	66 95       	lsr	r22
 240:	66 95       	lsr	r22
 242:	66 95       	lsr	r22
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	69 27       	eor	r22, r25
 248:	61 70       	andi	r22, 0x01	; 1
 24a:	86 95       	lsr	r24
 24c:	86 95       	lsr	r24
 24e:	89 27       	eor	r24, r25
 250:	08 e3       	ldi	r16, 0x38	; 56
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	28 e0       	ldi	r18, 0x08	; 8
 256:	44 e0       	ldi	r20, 0x04	; 4
 258:	81 70       	andi	r24, 0x01	; 1
 25a:	23 df       	rcall	.-442    	; 0xa2 <CallTriigerJK>
 25c:	28 c0       	rjmp	.+80     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
				}else if (chooseTrigger=="D"){
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	86 36       	cpi	r24, 0x66	; 102
 262:	92 07       	cpc	r25, r18
 264:	91 f4       	brne	.+36     	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
					CallTriigerD(D_BUTTON,C_BUTTON,0b00100000,0b00010000,&PORTB);
 266:	60 b3       	in	r22, 0x10	; 16
 268:	80 b3       	in	r24, 0x10	; 16
 26a:	62 95       	swap	r22
 26c:	66 95       	lsr	r22
 26e:	67 70       	andi	r22, 0x07	; 7
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	69 27       	eor	r22, r25
 274:	61 70       	andi	r22, 0x01	; 1
 276:	82 95       	swap	r24
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	89 27       	eor	r24, r25
 27c:	08 e3       	ldi	r16, 0x38	; 56
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	20 e1       	ldi	r18, 0x10	; 16
 282:	40 e2       	ldi	r20, 0x20	; 32
 284:	81 70       	andi	r24, 0x01	; 1
 286:	3e df       	rcall	.-388    	; 0x104 <CallTriigerD>
 288:	12 c0       	rjmp	.+36     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
					}else if (chooseTrigger=="T"){
 28a:	88 56       	subi	r24, 0x68	; 104
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	71 f4       	brne	.+28     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
						CallTriigerT(T_BUTTON, 0b01000000,0b10000000,&PORTB);
 290:	80 b3       	in	r24, 0x10	; 16
 292:	82 95       	swap	r24
 294:	86 95       	lsr	r24
 296:	86 95       	lsr	r24
 298:	83 70       	andi	r24, 0x03	; 3
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	89 27       	eor	r24, r25
 29e:	28 e3       	ldi	r18, 0x38	; 56
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e8       	ldi	r20, 0x80	; 128
 2a4:	60 e4       	ldi	r22, 0x40	; 64
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	43 df       	rcall	.-378    	; 0x130 <CallTriigerT>
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
					}else reload();
 2ac:	49 df       	rcall	.-366    	; 0x140 <reload>
		char chooseTrigger;
		
		//???? ?????? ????????, ????????? ????? ??????? ??? ??????
		//? ?? ???????? ?? ??? ???????? ????????????, ???? ?? ????
		//??????? ?? ????????, ?? ????????? ???????????.
		while (trigger_selection(&chooseTrigger) && CheckButtonTriggres())
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	48 df       	rcall	.-368    	; 0x144 <trigger_selection>
 2b4:	89 2b       	or	r24, r25
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
 2b8:	70 df       	rcall	.-288    	; 0x19a <CheckButtonTriggres>
 2ba:	89 2b       	or	r24, r25
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
 2be:	a8 cf       	rjmp	.-176    	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
					}else if (chooseTrigger=="T"){
						CallTriigerT(T_BUTTON, 0b01000000,0b10000000,&PORTB);
					}else reload();
		}
		
		reload();
 2c0:	3f df       	rcall	.-386    	; 0x140 <reload>
	}
 2c2:	f5 cf       	rjmp	.-22     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
