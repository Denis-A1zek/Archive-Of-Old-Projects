
ProjectLogickLiza.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000688  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ed  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a8  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	11 d0       	rcall	.+34     	; 0x52 <main>
  30:	22 c0       	rjmp	.+68     	; 0x76 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <LogickElementXOR>:
	return !(firstInput || secondInput);
}

_Bool LogickElementXOR (_Bool firstInput, _Bool secondInput)
{
	return ((!firstInput && secondInput)||(!secondInput && firstInput));
  34:	81 11       	cpse	r24, r1
  36:	02 c0       	rjmp	.+4      	; 0x3c <LogickElementXOR+0x8>
  38:	61 11       	cpse	r22, r1
  3a:	05 c0       	rjmp	.+10     	; 0x46 <__SREG__+0x7>
  3c:	61 11       	cpse	r22, r1
  3e:	05 c0       	rjmp	.+10     	; 0x4a <__SREG__+0xb>
  40:	81 11       	cpse	r24, r1
  42:	05 c0       	rjmp	.+10     	; 0x4e <__SREG__+0xf>
  44:	08 95       	ret
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	08 95       	ret
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	08 95       	ret
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	08 95       	ret

00000052 <main>:
#define BUTTON7 (PIND&0x40)==0

int main(void)
{
	
	PORTB=0x00;
  52:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	87 bb       	out	0x17, r24	; 23
	PORTD=0xFF;
  58:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;
  5a:	11 ba       	out	0x11, r1	; 17
	
    /* Replace with your application code */
    while (1) 
    {
			PORTB = LogickElementXOR(BUTTON1, BUTTON2);
  5c:	60 b3       	in	r22, 0x10	; 16
  5e:	90 b3       	in	r25, 0x10	; 16
  60:	66 95       	lsr	r22
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	68 27       	eor	r22, r24
  66:	61 70       	andi	r22, 0x01	; 1
  68:	89 27       	eor	r24, r25
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	81 70       	andi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	e1 df       	rcall	.-62     	; 0x34 <LogickElementXOR>
  72:	88 bb       	out	0x18, r24	; 24
  74:	f3 cf       	rjmp	.-26     	; 0x5c <main+0xa>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
