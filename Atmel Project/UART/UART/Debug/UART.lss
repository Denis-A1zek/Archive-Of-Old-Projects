
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800094  00800094  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072a  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000593  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cc  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e4  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	66 c0       	rjmp	.+204    	; 0xe4 <__vector_11>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	82 c0       	rjmp	.+260    	; 0x12c <__vector_11+0x48>
  28:	85 c0       	rjmp	.+266    	; 0x134 <__vector_11+0x50>
  2a:	88 c0       	rjmp	.+272    	; 0x13c <__vector_11+0x58>
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__vector_11+0x60>
  2e:	8e c0       	rjmp	.+284    	; 0x14c <__vector_11+0x68>
  30:	91 c0       	rjmp	.+290    	; 0x154 <__vector_11+0x70>
  32:	94 c0       	rjmp	.+296    	; 0x15c <__vector_11+0x78>
  34:	97 c0       	rjmp	.+302    	; 0x164 <__vector_11+0x80>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e6 ed       	ldi	r30, 0xD6	; 214
  4a:	f1 e0       	ldi	r31, 0x01	; 1
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a4 39       	cpi	r26, 0x94	; 148
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	a4 e9       	ldi	r26, 0x94	; 148
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	a7 39       	cpi	r26, 0x97	; 151
  64:	b2 07       	cpc	r27, r18
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	91 d0       	rcall	.+290    	; 0x18c <main>
  6a:	b3 c0       	rjmp	.+358    	; 0x1d2 <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <_delay_us>:
// Функция приема данных по USART
int uart_receive(void)
{
	while(!(UCSRA & (1 << RXC)));// Ожидаем, когда данные будут получены
	return UDR; // Читаем данные из буфера и возвращаем их при выходе из подпрограммы
}
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	03 c0       	rjmp	.+6      	; 0x78 <_delay_us+0xa>
  72:	0f 92       	push	r0
  74:	0f 90       	pop	r0
  76:	9f 5f       	subi	r25, 0xFF	; 255
  78:	98 17       	cp	r25, r24
  7a:	d8 f3       	brcs	.-10     	; 0x72 <_delay_us+0x4>
  7c:	08 95       	ret

0000007e <_delay_ms>:
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	8c 01       	movw	r16, r24
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <_delay_ms+0x22>
  8e:	8a ef       	ldi	r24, 0xFA	; 250
  90:	ee df       	rcall	.-36     	; 0x6e <_delay_us>
  92:	8a ef       	ldi	r24, 0xFA	; 250
  94:	ec df       	rcall	.-40     	; 0x6e <_delay_us>
  96:	8a ef       	ldi	r24, 0xFA	; 250
  98:	ea df       	rcall	.-44     	; 0x6e <_delay_us>
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	e8 df       	rcall	.-48     	; 0x6e <_delay_us>
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	c0 17       	cp	r28, r16
  a2:	d1 07       	cpc	r29, r17
  a4:	a0 f3       	brcs	.-24     	; 0x8e <_delay_ms+0x10>
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	1f 91       	pop	r17
  ac:	0f 91       	pop	r16
  ae:	08 95       	ret

000000b0 <uart_send>:
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <uart_send>
  b4:	8c b9       	out	0x0c, r24	; 12
  b6:	08 95       	ret

000000b8 <str_uart_send>:
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <str_uart_send+0xc>
  c0:	f7 df       	rcall	.-18     	; 0xb0 <uart_send>
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	88 81       	ld	r24, Y
  c6:	81 11       	cpse	r24, r1
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <str_uart_send+0x8>
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <uart_init>:
// USART Приемник: Включен
// USART Передатчик: Включен
// USART Режим: Асинхронный
// USART Скорость обмена: 9600

	UBRRL = (F_CPU/BAUDRATE/16-1); // Вычисляем скорость обмена данными  
  d0:	83 e3       	ldi	r24, 0x33	; 51
  d2:	89 b9       	out	0x09, r24	; 9
	UBRRH = (F_CPU/BAUDRATE/16-1) >> 8;
  d4:	10 bc       	out	0x20, r1	; 32

	UCSRB |= (1 << RXCIE)| // Разрешаем прерывание по завершению приема данных
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 69       	ori	r24, 0x98	; 152
  da:	8a b9       	out	0x0a, r24	; 10
          (1 << RXEN)|(1 << TXEN); // Включаем приемник и передатчик
                                                
	UCSRC |= (1 << URSEL)| // Для доступа к регистру UCSRC выставляем бит URSEL
  dc:	80 b5       	in	r24, 0x20	; 32
  de:	86 68       	ori	r24, 0x86	; 134
  e0:	80 bd       	out	0x20, r24	; 32
  e2:	08 95       	ret

000000e4 <__vector_11>:
         (1 << UCSZ1)|(1 << UCSZ0);  // Размер посылки в кадре 8 бит
}

// Прерывание по окончанию приема данных по USART
ISR(USART_RXC_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	NUM = UDR; // Принимаем символ по USART
 106:	8c b1       	in	r24, 0x0c	; 12
 108:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <NUM>
	byte_receive = 1;
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
	uart_send(NUM); // Посылаем символ по USART
 112:	ce df       	rcall	.-100    	; 0xb0 <uart_send>
	
	switch (NUM)
 114:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <NUM>
 118:	8e 2f       	mov	r24, r30
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	f1 97       	sbiw	r30, 0x31	; 49
 120:	e8 30       	cpi	r30, 0x08	; 8
 122:	f1 05       	cpc	r31, r1
 124:	10 f5       	brcc	.+68     	; 0x16a <__vector_11+0x86>
 126:	ed 5e       	subi	r30, 0xED	; 237
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	09 94       	ijmp
	{
		case '1':
			PORTB |= (1 << PB0);
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	88 bb       	out	0x18, r24	; 24
		break;
 132:	1b c0       	rjmp	.+54     	; 0x16a <__vector_11+0x86>
		case '2':
			PORTB |= (1 << PB1);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	82 60       	ori	r24, 0x02	; 2
 138:	88 bb       	out	0x18, r24	; 24
		break;
 13a:	17 c0       	rjmp	.+46     	; 0x16a <__vector_11+0x86>
		case '3':
			PORTB |= (1 << PB2);
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	88 bb       	out	0x18, r24	; 24
		break;
 142:	13 c0       	rjmp	.+38     	; 0x16a <__vector_11+0x86>
		case '4':
			PORTB |= (1 << PB3);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	88 60       	ori	r24, 0x08	; 8
 148:	88 bb       	out	0x18, r24	; 24
		break;
 14a:	0f c0       	rjmp	.+30     	; 0x16a <__vector_11+0x86>
		case '5':
			PORTB |= (1 << PB4);
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	88 bb       	out	0x18, r24	; 24
		break;
 152:	0b c0       	rjmp	.+22     	; 0x16a <__vector_11+0x86>
		case '6':
			PORTB |= (1 << PB5);
 154:	88 b3       	in	r24, 0x18	; 24
 156:	80 62       	ori	r24, 0x20	; 32
 158:	88 bb       	out	0x18, r24	; 24
		break;
 15a:	07 c0       	rjmp	.+14     	; 0x16a <__vector_11+0x86>
		case '7':
			PORTB |= (1 << PB6);
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	88 bb       	out	0x18, r24	; 24
		break;
 162:	03 c0       	rjmp	.+6      	; 0x16a <__vector_11+0x86>
		case '8':
			PORTB |= (1 << PB7);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	80 68       	ori	r24, 0x80	; 128
 168:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		/* Your code here */
		break;
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:

// ������� �������
int main(void)
{
	DDRB = 0xFF;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;        			
 190:	18 ba       	out	0x18, r1	; 24

	DDRC  = 0x00;	
 192:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
 194:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111110;
 196:	8e ef       	ldi	r24, 0xFE	; 254
 198:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 19a:	12 ba       	out	0x12, r1	; 18
	
	uart_init(); // Инициализация USART
 19c:	99 df       	rcall	.-206    	; 0xd0 <uart_init>
	
	sei(); // Разрешаем глобальные прерывания
 19e:	78 94       	sei

	str_uart_send("Initialization system\r\n"); // Передаем строку по USART
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	89 df       	rcall	.-238    	; 0xb8 <str_uart_send>
	str_uart_send("UART V0.1.1 Izvarin Dima\r\n"); // Передаем строку по USART
 1a6:	88 e7       	ldi	r24, 0x78	; 120
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	86 df       	rcall	.-244    	; 0xb8 <str_uart_send>
	_delay_ms(2500);
 1ac:	84 ec       	ldi	r24, 0xC4	; 196
 1ae:	99 e0       	ldi	r25, 0x09	; 9
 1b0:	66 df       	rcall	.-308    	; 0x7e <_delay_ms>
	
	while(1)
	{

		if(byte_receive)
 1b2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 1b6:	88 23       	and	r24, r24
 1b8:	e1 f3       	breq	.-8      	; 0x1b2 <main+0x26>
		{
			byte_receive = 0;
 1ba:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
			count++;
 1be:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <count>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <count>
			if(count > 16) //Если строка заполнена
 1c8:	81 31       	cpi	r24, 0x11	; 17
 1ca:	98 f3       	brcs	.-26     	; 0x1b2 <main+0x26>
			{
			count = 0;
 1cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <count>
 1d0:	f0 cf       	rjmp	.-32     	; 0x1b2 <main+0x26>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
