
Ygadaika.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000904  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057b  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000338  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f8  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e7       	ldi	r30, 0x76	; 118
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ae 36       	cpi	r26, 0x6E	; 110
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ae e6       	ldi	r26, 0x6E	; 110
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 36       	cpi	r26, 0x6F	; 111
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	12 d0       	rcall	.+36     	; 0x7a <main>
  56:	8d c1       	rjmp	.+794    	; 0x372 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <get_rand_range_int>:
#include <time.h>
#include <util/delay.h>



char get_rand_range_int(char min, char max) {
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	d8 2f       	mov	r29, r24
  60:	c6 2f       	mov	r28, r22
	return rand() % (max - min + 1) + min;
  62:	21 d1       	rcall	.+578    	; 0x2a6 <rand>
  64:	6c 2f       	mov	r22, r28
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	6d 1b       	sub	r22, r29
  6a:	71 09       	sbc	r23, r1
  6c:	6f 5f       	subi	r22, 0xFF	; 255
  6e:	7f 4f       	sbci	r23, 0xFF	; 255
  70:	a9 d0       	rcall	.+338    	; 0x1c4 <__divmodhi4>
}
  72:	8d 0f       	add	r24, r29
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	08 95       	ret

0000007a <main>:

char win = 0;

int main(void)
{
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	dd 27       	eor	r29, r29
  82:	ca 50       	subi	r28, 0x0A	; 10
  84:	cd bf       	out	0x3d, r28	; 61
	PORTD=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;
  8a:	11 ba       	out	0x11, r1	; 17
	PORTB=0x00;
  8c:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
  8e:	87 bb       	out	0x17, r24	; 23
	
	char segmentStates[] = {0b0000000, 0b0000110,0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};
  90:	8a e0       	ldi	r24, 0x0A	; 10
  92:	e4 e6       	ldi	r30, 0x64	; 100
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	de 01       	movw	r26, r28
  98:	11 96       	adiw	r26, 0x01	; 1
  9a:	01 90       	ld	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	8a 95       	dec	r24
  a0:	e1 f7       	brne	.-8      	; 0x9a <__DATA_REGION_LENGTH__+0x1a>
    /* Replace with your application code */
    while (1) 
    {
		win = 0;
  a2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
		if((PIND&0x40) == 0)
  a6:	86 99       	sbic	0x10, 6	; 16
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <__DATA_REGION_LENGTH__+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e9       	ldi	r18, 0x9F	; 159
  ac:	36 e8       	ldi	r19, 0x86	; 134
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	60 40       	sbci	r22, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__DATA_REGION_LENGTH__+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <__DATA_REGION_LENGTH__+0x3a>
  ba:	00 00       	nop
		{
			_delay_ms(500);
			
			int random = get_rand_range_int(1,9);
  bc:	69 e0       	ldi	r22, 0x09	; 9
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	cc df       	rcall	.-104    	; 0x5a <get_rand_range_int>
  c2:	90 e0       	ldi	r25, 0x00	; 0
			
			PORTB = segmentStates[random];
  c4:	e1 e0       	ldi	r30, 0x01	; 1
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ec 0f       	add	r30, r28
  ca:	fd 1f       	adc	r31, r29
  cc:	e8 0f       	add	r30, r24
  ce:	f9 1f       	adc	r31, r25
  d0:	20 81       	ld	r18, Z
  d2:	28 bb       	out	0x18, r18	; 24
			
			char randomHex = random;
			
			for (int i = 0; i < 10; i++)
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	40 c0       	rjmp	.+128    	; 0x15a <__stack+0x7b>
			{
				int temp = PIND&0x0F;
  da:	20 b3       	in	r18, 0x10	; 16
  dc:	2f 70       	andi	r18, 0x0F	; 15
  de:	30 e0       	ldi	r19, 0x00	; 0
				
				if(temp == randomHex)
  e0:	82 17       	cp	r24, r18
  e2:	93 07       	cpc	r25, r19
  e4:	79 f5       	brne	.+94     	; 0x144 <__stack+0x65>
				{
					win = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
					PORTB = 0b1110111;
  ec:	87 e7       	ldi	r24, 0x77	; 119
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	ef e4       	ldi	r30, 0x4F	; 79
  f2:	f3 ec       	ldi	r31, 0xC3	; 195
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <__stack+0x15>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__stack+0x1b>
  fa:	00 00       	nop
					_delay_ms(200);
					PORTB = 0x00;
  fc:	18 ba       	out	0x18, r1	; 24
  fe:	ef e4       	ldi	r30, 0x4F	; 79
 100:	f3 ec       	ldi	r31, 0xC3	; 195
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__stack+0x23>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__stack+0x29>
 108:	00 00       	nop
					_delay_ms(200);
					PORTB = 0b1110111;
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	ef e4       	ldi	r30, 0x4F	; 79
 10e:	f3 ec       	ldi	r31, 0xC3	; 195
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <__stack+0x31>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__stack+0x37>
 116:	00 00       	nop
					_delay_ms(200);
					PORTB = 0x00;
 118:	18 ba       	out	0x18, r1	; 24
 11a:	ef e4       	ldi	r30, 0x4F	; 79
 11c:	f3 ec       	ldi	r31, 0xC3	; 195
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <__stack+0x3f>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__stack+0x45>
 124:	00 00       	nop
					_delay_ms(200);
					PORTB = 0b1110111;
 126:	88 bb       	out	0x18, r24	; 24
 128:	8f e4       	ldi	r24, 0x4F	; 79
 12a:	93 ec       	ldi	r25, 0xC3	; 195
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <__stack+0x4d>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__stack+0x53>
 132:	00 00       	nop
					_delay_ms(200);
					PORTB = 0x00;
 134:	18 ba       	out	0x18, r1	; 24
 136:	ef e4       	ldi	r30, 0x4F	; 79
 138:	f3 ec       	ldi	r31, 0xC3	; 195
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <__stack+0x5b>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__stack+0x61>
 140:	00 00       	nop
 142:	0f c0       	rjmp	.+30     	; 0x162 <__stack+0x83>
 144:	ff e5       	ldi	r31, 0x5F	; 95
 146:	2a ee       	ldi	r18, 0xEA	; 234
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f1 50       	subi	r31, 0x01	; 1
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	30 40       	sbci	r19, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <__stack+0x6b>
 152:	00 c0       	rjmp	.+0      	; 0x154 <__stack+0x75>
 154:	00 00       	nop
			
			PORTB = segmentStates[random];
			
			char randomHex = random;
			
			for (int i = 0; i < 10; i++)
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	4a 30       	cpi	r20, 0x0A	; 10
 15c:	51 05       	cpc	r21, r1
 15e:	0c f4       	brge	.+2      	; 0x162 <__stack+0x83>
 160:	bc cf       	rjmp	.-136    	; 0xda <__DATA_REGION_LENGTH__+0x5a>
					break;
				}
			_delay_ms(300);
			}
			
			if(win == 1)
 162:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f4       	brne	.+2      	; 0x16c <__stack+0x8d>
 16a:	9b cf       	rjmp	.-202    	; 0xa2 <__DATA_REGION_LENGTH__+0x22>
				continue;
			
			PORTB = 0b0001110;
 16c:	8e e0       	ldi	r24, 0x0E	; 14
 16e:	88 bb       	out	0x18, r24	; 24
 170:	ef e4       	ldi	r30, 0x4F	; 79
 172:	f3 ec       	ldi	r31, 0xC3	; 195
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__stack+0x95>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__stack+0x9b>
 17a:	00 00       	nop
			_delay_ms(200);
			PORTB = 0x00;
 17c:	18 ba       	out	0x18, r1	; 24
 17e:	ef e4       	ldi	r30, 0x4F	; 79
 180:	f3 ec       	ldi	r31, 0xC3	; 195
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <__stack+0xa3>
 186:	00 c0       	rjmp	.+0      	; 0x188 <__stack+0xa9>
 188:	00 00       	nop
			_delay_ms(200);
			PORTB = 0b0001110;
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	ef e4       	ldi	r30, 0x4F	; 79
 18e:	f3 ec       	ldi	r31, 0xC3	; 195
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <__stack+0xb1>
 194:	00 c0       	rjmp	.+0      	; 0x196 <__stack+0xb7>
 196:	00 00       	nop
			_delay_ms(200);
			PORTB = 0x00;
 198:	18 ba       	out	0x18, r1	; 24
 19a:	ef e4       	ldi	r30, 0x4F	; 79
 19c:	f3 ec       	ldi	r31, 0xC3	; 195
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <__stack+0xbf>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__stack+0xc5>
 1a4:	00 00       	nop
			_delay_ms(200);
			PORTB = 0b0001110;
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	8f e4       	ldi	r24, 0x4F	; 79
 1aa:	93 ec       	ldi	r25, 0xC3	; 195
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <__stack+0xcd>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <__stack+0xd3>
 1b2:	00 00       	nop
			_delay_ms(200);
			PORTB = 0x00;
 1b4:	18 ba       	out	0x18, r1	; 24
 1b6:	ef e4       	ldi	r30, 0x4F	; 79
 1b8:	f3 ec       	ldi	r31, 0xC3	; 195
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <__stack+0xdb>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__stack+0xe1>
 1c0:	00 00       	nop
 1c2:	6f cf       	rjmp	.-290    	; 0xa2 <__DATA_REGION_LENGTH__+0x22>

000001c4 <__divmodhi4>:
 1c4:	97 fb       	bst	r25, 7
 1c6:	07 2e       	mov	r0, r23
 1c8:	16 f4       	brtc	.+4      	; 0x1ce <__divmodhi4+0xa>
 1ca:	00 94       	com	r0
 1cc:	06 d0       	rcall	.+12     	; 0x1da <__divmodhi4_neg1>
 1ce:	77 fd       	sbrc	r23, 7
 1d0:	08 d0       	rcall	.+16     	; 0x1e2 <__divmodhi4_neg2>
 1d2:	0b d0       	rcall	.+22     	; 0x1ea <__udivmodhi4>
 1d4:	07 fc       	sbrc	r0, 7
 1d6:	05 d0       	rcall	.+10     	; 0x1e2 <__divmodhi4_neg2>
 1d8:	3e f4       	brtc	.+14     	; 0x1e8 <__divmodhi4_exit>

000001da <__divmodhi4_neg1>:
 1da:	90 95       	com	r25
 1dc:	81 95       	neg	r24
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__divmodhi4_neg2>:
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255

000001e8 <__divmodhi4_exit>:
 1e8:	08 95       	ret

000001ea <__udivmodhi4>:
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	51 e1       	ldi	r21, 0x11	; 17
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__udivmodhi4_ep>

000001f2 <__udivmodhi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	a6 17       	cp	r26, r22
 1f8:	b7 07       	cpc	r27, r23
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__udivmodhi4_ep>
 1fc:	a6 1b       	sub	r26, r22
 1fe:	b7 0b       	sbc	r27, r23

00000200 <__udivmodhi4_ep>:
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	5a 95       	dec	r21
 206:	a9 f7       	brne	.-22     	; 0x1f2 <__udivmodhi4_loop>
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	08 95       	ret

00000212 <do_rand>:
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	68 81       	ld	r22, Y
 22a:	79 81       	ldd	r23, Y+1	; 0x01
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	9b 81       	ldd	r25, Y+3	; 0x03
 230:	61 15       	cp	r22, r1
 232:	71 05       	cpc	r23, r1
 234:	81 05       	cpc	r24, r1
 236:	91 05       	cpc	r25, r1
 238:	21 f4       	brne	.+8      	; 0x242 <do_rand+0x30>
 23a:	64 e2       	ldi	r22, 0x24	; 36
 23c:	79 ed       	ldi	r23, 0xD9	; 217
 23e:	8b e5       	ldi	r24, 0x5B	; 91
 240:	97 e0       	ldi	r25, 0x07	; 7
 242:	2d e1       	ldi	r18, 0x1D	; 29
 244:	33 ef       	ldi	r19, 0xF3	; 243
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	55 d0       	rcall	.+170    	; 0x2f6 <__divmodsi4>
 24c:	49 01       	movw	r8, r18
 24e:	5a 01       	movw	r10, r20
 250:	27 ea       	ldi	r18, 0xA7	; 167
 252:	31 e4       	ldi	r19, 0x41	; 65
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	35 d0       	rcall	.+106    	; 0x2c4 <__mulsi3>
 25a:	6b 01       	movw	r12, r22
 25c:	7c 01       	movw	r14, r24
 25e:	2c ee       	ldi	r18, 0xEC	; 236
 260:	34 ef       	ldi	r19, 0xF4	; 244
 262:	4f ef       	ldi	r20, 0xFF	; 255
 264:	5f ef       	ldi	r21, 0xFF	; 255
 266:	c5 01       	movw	r24, r10
 268:	b4 01       	movw	r22, r8
 26a:	2c d0       	rcall	.+88     	; 0x2c4 <__mulsi3>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	8c 0d       	add	r24, r12
 272:	9d 1d       	adc	r25, r13
 274:	ae 1d       	adc	r26, r14
 276:	bf 1d       	adc	r27, r15
 278:	b7 ff       	sbrs	r27, 7
 27a:	03 c0       	rjmp	.+6      	; 0x282 <do_rand+0x70>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	a1 09       	sbc	r26, r1
 280:	b0 48       	sbci	r27, 0x80	; 128
 282:	88 83       	st	Y, r24
 284:	99 83       	std	Y+1, r25	; 0x01
 286:	aa 83       	std	Y+2, r26	; 0x02
 288:	bb 83       	std	Y+3, r27	; 0x03
 28a:	9f 77       	andi	r25, 0x7F	; 127
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	08 95       	ret

000002a2 <rand_r>:
 2a2:	b7 df       	rcall	.-146    	; 0x212 <do_rand>
 2a4:	08 95       	ret

000002a6 <rand>:
 2a6:	80 e6       	ldi	r24, 0x60	; 96
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	b3 df       	rcall	.-154    	; 0x212 <do_rand>
 2ac:	08 95       	ret

000002ae <srand>:
 2ae:	a0 e0       	ldi	r26, 0x00	; 0
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2be:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2c2:	08 95       	ret

000002c4 <__mulsi3>:
 2c4:	ee 27       	eor	r30, r30
 2c6:	ff 27       	eor	r31, r31

000002c8 <__mulsi3_helper>:
 2c8:	aa 27       	eor	r26, r26
 2ca:	bb 27       	eor	r27, r27
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <__mulsi3_helper+0x16>
 2ce:	a2 0f       	add	r26, r18
 2d0:	b3 1f       	adc	r27, r19
 2d2:	e4 1f       	adc	r30, r20
 2d4:	f5 1f       	adc	r31, r21
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	44 1f       	adc	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	77 95       	ror	r23
 2e4:	67 95       	ror	r22
 2e6:	98 f3       	brcs	.-26     	; 0x2ce <__mulsi3_helper+0x6>
 2e8:	70 40       	sbci	r23, 0x00	; 0
 2ea:	a9 f7       	brne	.-22     	; 0x2d6 <__mulsi3_helper+0xe>
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	99 f7       	brne	.-26     	; 0x2d6 <__mulsi3_helper+0xe>
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <__divmodsi4>:
 2f6:	05 2e       	mov	r0, r21
 2f8:	97 fb       	bst	r25, 7
 2fa:	16 f4       	brtc	.+4      	; 0x300 <__divmodsi4+0xa>
 2fc:	00 94       	com	r0
 2fe:	0f d0       	rcall	.+30     	; 0x31e <__negsi2>
 300:	57 fd       	sbrc	r21, 7
 302:	05 d0       	rcall	.+10     	; 0x30e <__divmodsi4_neg2>
 304:	14 d0       	rcall	.+40     	; 0x32e <__udivmodsi4>
 306:	07 fc       	sbrc	r0, 7
 308:	02 d0       	rcall	.+4      	; 0x30e <__divmodsi4_neg2>
 30a:	46 f4       	brtc	.+16     	; 0x31c <__divmodsi4_exit>
 30c:	08 c0       	rjmp	.+16     	; 0x31e <__negsi2>

0000030e <__divmodsi4_neg2>:
 30e:	50 95       	com	r21
 310:	40 95       	com	r20
 312:	30 95       	com	r19
 314:	21 95       	neg	r18
 316:	3f 4f       	sbci	r19, 0xFF	; 255
 318:	4f 4f       	sbci	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255

0000031c <__divmodsi4_exit>:
 31c:	08 95       	ret

0000031e <__negsi2>:
 31e:	90 95       	com	r25
 320:	80 95       	com	r24
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	08 95       	ret

0000032e <__udivmodsi4>:
 32e:	a1 e2       	ldi	r26, 0x21	; 33
 330:	1a 2e       	mov	r1, r26
 332:	aa 1b       	sub	r26, r26
 334:	bb 1b       	sub	r27, r27
 336:	fd 01       	movw	r30, r26
 338:	0d c0       	rjmp	.+26     	; 0x354 <__udivmodsi4_ep>

0000033a <__udivmodsi4_loop>:
 33a:	aa 1f       	adc	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	ee 1f       	adc	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	a2 17       	cp	r26, r18
 344:	b3 07       	cpc	r27, r19
 346:	e4 07       	cpc	r30, r20
 348:	f5 07       	cpc	r31, r21
 34a:	20 f0       	brcs	.+8      	; 0x354 <__udivmodsi4_ep>
 34c:	a2 1b       	sub	r26, r18
 34e:	b3 0b       	sbc	r27, r19
 350:	e4 0b       	sbc	r30, r20
 352:	f5 0b       	sbc	r31, r21

00000354 <__udivmodsi4_ep>:
 354:	66 1f       	adc	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	1a 94       	dec	r1
 35e:	69 f7       	brne	.-38     	; 0x33a <__udivmodsi4_loop>
 360:	60 95       	com	r22
 362:	70 95       	com	r23
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	bd 01       	movw	r22, r26
 36e:	cf 01       	movw	r24, r30
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
