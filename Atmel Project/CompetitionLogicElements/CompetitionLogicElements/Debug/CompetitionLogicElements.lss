
CompetitionLogicElements.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000ca  008000ca  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffe  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079a  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085d  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fc  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee ee       	ldi	r30, 0xEE	; 238
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 3c       	cpi	r26, 0xCA	; 202
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa ec       	ldi	r26, 0xCA	; 202
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ac 3c       	cpi	r26, 0xCC	; 204
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	1e d1       	rcall	.+572    	; 0x292 <main>
  56:	c9 c1       	rjmp	.+914    	; 0x3ea <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendhalfbyte>:
#include "lcd_display.h"

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=3;
  5a:	88 0f       	add	r24, r24
  5c:	88 0f       	add	r24, r24
  5e:	88 0f       	add	r24, r24
	e1; //включаем линию Е
  60:	92 b3       	in	r25, 0x12	; 18
  62:	94 60       	ori	r25, 0x04	; 4
  64:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	90 e1       	ldi	r25, 0x10	; 16
  68:	9a 95       	dec	r25
  6a:	f1 f7       	brne	.-4      	; 0x68 <sendhalfbyte+0xe>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <sendhalfbyte+0x14>
	_delay_us(50);
	PORTD&=0b10000111; //стираем информацию на входах DB4-DB7, остальное не трогаем
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	97 78       	andi	r25, 0x87	; 135
  72:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;
  74:	92 b3       	in	r25, 0x12	; 18
  76:	89 2b       	or	r24, r25
  78:	82 bb       	out	0x12, r24	; 18
	e0; //выключаем линию Е
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	8b 7f       	andi	r24, 0xFB	; 251
  7e:	82 bb       	out	0x12, r24	; 18
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	8a 95       	dec	r24
  84:	f1 f7       	brne	.-4      	; 0x82 <__DATA_REGION_LENGTH__+0x2>
  86:	00 c0       	rjmp	.+0      	; 0x88 <__DATA_REGION_LENGTH__+0x8>
  88:	08 95       	ret

0000008a <sendbyte>:
	_delay_us(50);
}
//----------------------------------------
void sendbyte(unsigned char c, unsigned char mode)
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
	if (mode==0) rs0;
  8e:	61 11       	cpse	r22, r1
  90:	04 c0       	rjmp	.+8      	; 0x9a <sendbyte+0x10>
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	82 bb       	out	0x12, r24	; 18
  98:	03 c0       	rjmp	.+6      	; 0xa0 <sendbyte+0x16>
	else         rs1;
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	82 bb       	out	0x12, r24	; 18
	unsigned char hc=0;
	hc=c>>4;
	sendhalfbyte(hc); sendhalfbyte(c);
  a0:	8c 2f       	mov	r24, r28
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	d9 df       	rcall	.-78     	; 0x5a <sendhalfbyte>
  a8:	8c 2f       	mov	r24, r28
  aa:	d7 df       	rcall	.-82     	; 0x5a <sendhalfbyte>
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <sendcharlcd>:
//----------------------------------------
void sendcharlcd(unsigned char c)
{
	sendbyte(c,1);
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	eb df       	rcall	.-42     	; 0x8a <sendbyte>
  b4:	08 95       	ret

000000b6 <setpos>:
}
//----------------------------------------
void setpos(unsigned char x, unsigned y)
{
	char adress;
	adress=(0x40*y+x)|0b10000000;
  b6:	62 95       	swap	r22
  b8:	66 0f       	add	r22, r22
  ba:	66 0f       	add	r22, r22
  bc:	60 7c       	andi	r22, 0xC0	; 192
  be:	86 0f       	add	r24, r22
	sendbyte(adress, 0);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	e2 df       	rcall	.-60     	; 0x8a <sendbyte>
  c6:	08 95       	ret

000000c8 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	85 ea       	ldi	r24, 0xA5	; 165
  ca:	9e e0       	ldi	r25, 0x0E	; 14
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_ini+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_ini+0xa>
  d2:	00 00       	nop
}
//----------------------------------------
void LCD_ini(void)
{
	_delay_ms(15); //Ждем 15 мс (стр 45)
	sendhalfbyte(0b00000011);
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	c1 df       	rcall	.-126    	; 0x5a <sendhalfbyte>
  d8:	87 ee       	ldi	r24, 0xE7	; 231
  da:	93 e0       	ldi	r25, 0x03	; 3
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_ini+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	b9 df       	rcall	.-142    	; 0x5a <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	91 e2       	ldi	r25, 0x21	; 33
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <__stack+0xb>
  ee:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	b3 df       	rcall	.-154    	; 0x5a <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__stack+0x19>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__stack+0x1f>
  fe:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	ab df       	rcall	.-170    	; 0x5a <sendhalfbyte>
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <__stack+0x29>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__stack+0x2f>
 10e:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	ba df       	rcall	.-140    	; 0x8a <sendbyte>
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__stack+0x3b>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__stack+0x41>
 120:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	b1 df       	rcall	.-158    	; 0x8a <sendbyte>
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <__stack+0x4d>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__stack+0x53>
 132:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	a8 df       	rcall	.-176    	; 0x8a <sendbyte>
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <__stack+0x5f>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__stack+0x65>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <clearlcd>:
	_delay_ms(1);
}
//----------------------------------------
void clearlcd(void)
{
	sendbyte(0b00000001, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	9e df       	rcall	.-196    	; 0x8a <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	86 e7       	ldi	r24, 0x76	; 118
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <clearlcd+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <clearlcd+0x10>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <str_lcd>:
	_delay_us(1500);
}
//----------------------------------------
void str_lcd (char str1[])
{
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	8c 01       	movw	r16, r24
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <str_lcd+0x14>
	sendcharlcd(str1[n]);
 16c:	a1 df       	rcall	.-190    	; 0xb0 <sendcharlcd>
}
//----------------------------------------
void str_lcd (char str1[])
{
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	f8 01       	movw	r30, r16
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	80 81       	ld	r24, Z
 178:	81 11       	cpse	r24, r1
 17a:	f8 cf       	rjmp	.-16     	; 0x16c <str_lcd+0x10>
	sendcharlcd(str1[n]);
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <LogicElementAND>:
}

_Bool LogicElementNOT (_Bool firstInput)
{
	return !firstInput;
}
 186:	88 23       	and	r24, r24
 188:	21 f0       	breq	.+8      	; 0x192 <LogicElementAND+0xc>
 18a:	61 11       	cpse	r22, r1
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LogicElementAND+0x10>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret

0000019a <LogicElementOR>:
 19a:	81 11       	cpse	r24, r1
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <LogicElementOR+0xc>
 19e:	66 23       	and	r22, r22
 1a0:	21 f0       	breq	.+8      	; 0x1aa <LogicElementOR+0x10>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <LogicElementNAND>:

_Bool LogicElementNAND (_Bool firstInput, _Bool secondInput)
{
	return !(firstInput && secondInput);
 1ae:	88 23       	and	r24, r24
 1b0:	21 f0       	breq	.+8      	; 0x1ba <LogicElementNAND+0xc>
 1b2:	61 11       	cpse	r22, r1
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <LogicElementNAND+0x10>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
 1be:	80 e0       	ldi	r24, 0x00	; 0
}
 1c0:	08 95       	ret

000001c2 <LogicElementNOR>:

_Bool LogicElementNOR (_Bool firstInput, _Bool secondInput)
{
	return !(firstInput || secondInput);
 1c2:	81 11       	cpse	r24, r1
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <LogicElementNOR+0xa>
 1c6:	66 23       	and	r22, r22
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <LogicElementNOR+0xe>
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	81 e0       	ldi	r24, 0x01	; 1
}
 1d2:	08 95       	ret

000001d4 <LogicElementXOR>:

_Bool LogicElementXOR (_Bool firstInput, _Bool secondInput)
{
	return ((!firstInput && secondInput)||(!secondInput && firstInput));
 1d4:	81 11       	cpse	r24, r1
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LogicElementXOR+0x8>
 1d8:	61 11       	cpse	r22, r1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <LogicElementXOR+0x12>
 1dc:	61 11       	cpse	r22, r1
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <LogicElementXOR+0x16>
 1e0:	81 11       	cpse	r24, r1
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <LogicElementXOR+0x1a>
 1e4:	08 95       	ret
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	81 e0       	ldi	r24, 0x01	; 1
}
 1f0:	08 95       	ret

000001f2 <LogicElementXNOR>:

_Bool LogicElementXNOR (_Bool firstInput, _Bool secondInput)
{
	return (firstInput || !secondInput) && (!firstInput || secondInput);
 1f2:	81 11       	cpse	r24, r1
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <LogicElementXNOR+0x8>
 1f6:	61 11       	cpse	r22, r1
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <LogicElementXNOR+0x14>
 1fa:	88 23       	and	r24, r24
 1fc:	31 f0       	breq	.+12     	; 0x20a <LogicElementXNOR+0x18>
 1fe:	61 11       	cpse	r22, r1
 200:	06 c0       	rjmp	.+12     	; 0x20e <LogicElementXNOR+0x1c>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <ShowInfo>:

#define BUTTONX1 (PINB&0x02)==0
#define BUTTONX2 (PINB&0x04)==0

void ShowInfo(char info)
{
 212:	cf 93       	push	r28
	if((PINB&0x08)==0)
 214:	b3 99       	sbic	0x16, 3	; 22
 216:	0b c0       	rjmp	.+22     	; 0x22e <ShowInfo+0x1c>
 218:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8b e4       	ldi	r24, 0x4B	; 75
 21c:	9d e1       	ldi	r25, 0x1D	; 29
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <ShowInfo+0xc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <ShowInfo+0x12>
 224:	00 00       	nop
	{
		_delay_ms(30);
		clearlcd();
 226:	90 df       	rcall	.-224    	; 0x148 <clearlcd>
		str_lcd(info);
 228:	8c 2f       	mov	r24, r28
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	97 df       	rcall	.-210    	; 0x15c <str_lcd>
	}
}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <InicializationButton>:

void InicializationButton()
{
	if((PINB&0x01) == 0 && flagButton == 0)
 232:	b0 99       	sbic	0x16, 0	; 22
 234:	1a c0       	rjmp	.+52     	; 0x26a <InicializationButton+0x38>
 236:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 23a:	81 11       	cpse	r24, r1
 23c:	16 c0       	rjmp	.+44     	; 0x26a <InicializationButton+0x38>
	{
		mode++;
 23e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <mode>
		flagButton = 1;
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__data_end>
		
		if(mode > 6)
 24e:	87 30       	cpi	r24, 0x07	; 7
 250:	10 f0       	brcs	.+4      	; 0x256 <InicializationButton+0x24>
		mode = 0;
 252:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <mode>
 256:	2f e9       	ldi	r18, 0x9F	; 159
 258:	86 e8       	ldi	r24, 0x86	; 134
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <InicializationButton+0x2a>
 264:	00 c0       	rjmp	.+0      	; 0x266 <InicializationButton+0x34>
 266:	00 00       	nop
 268:	08 95       	ret
		
		_delay_ms(500);
	}else
	flagButton = 0;
 26a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__data_end>
 26e:	08 95       	ret

00000270 <BlockInfo>:
}

void BlockInfo()
{
	clearlcd();
 270:	6b df       	rcall	.-298    	; 0x148 <clearlcd>
	str_lcd("Info block");
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	72 df       	rcall	.-284    	; 0x15c <str_lcd>
 278:	08 95       	ret

0000027a <GetResult>:
}

void GetResult(int boolState, char logicElement)
{
	if (boolState)
 27a:	89 2b       	or	r24, r25
 27c:	21 f0       	breq	.+8      	; 0x286 <GetResult+0xc>
	PORTD |= (1<<0);
 27e:	82 b3       	in	r24, 0x12	; 18
 280:	81 60       	ori	r24, 0x01	; 1
 282:	82 bb       	out	0x12, r24	; 18
 284:	03 c0       	rjmp	.+6      	; 0x28c <GetResult+0x12>
	else
	PORTD &= ~(1<<0);
 286:	82 b3       	in	r24, 0x12	; 18
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	82 bb       	out	0x12, r24	; 18
	
	ShowInfo(logicElement);
 28c:	86 2f       	mov	r24, r22
 28e:	c1 df       	rcall	.-126    	; 0x212 <ShowInfo>
 290:	08 95       	ret

00000292 <main>:
}

int main(void)
{
    PORTD = 0x00;
 292:	12 ba       	out	0x12, r1	; 18
    DDRD = 0xFF;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	81 bb       	out	0x11, r24	; 17
    PORTB = 0xFF;
 298:	88 bb       	out	0x18, r24	; 24
    DDRB = 0x00;
 29a:	17 ba       	out	0x17, r1	; 23
    
    LCD_ini();  
 29c:	15 df       	rcall	.-470    	; 0xc8 <LCD_ini>
    clearlcd();
 29e:	54 df       	rcall	.-344    	; 0x148 <clearlcd>
    setpos(0,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	07 df       	rcall	.-498    	; 0xb6 <setpos>
    str_lcd("Select element");
 2a8:	8b e6       	ldi	r24, 0x6B	; 107
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	57 df       	rcall	.-338    	; 0x15c <str_lcd>

	
    while (1) 
    {
		InicializationButton();		
 2ae:	c1 df       	rcall	.-126    	; 0x232 <InicializationButton>
		switch (mode)
 2b0:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	e9 f1       	breq	.+122    	; 0x332 <main+0xa0>
 2b8:	28 f4       	brcc	.+10     	; 0x2c4 <main+0x32>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <main+0x44>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	09 f1       	breq	.+66     	; 0x304 <main+0x72>
 2c2:	f5 cf       	rjmp	.-22     	; 0x2ae <main+0x1c>
 2c4:	85 30       	cpi	r24, 0x05	; 5
 2c6:	09 f4       	brne	.+2      	; 0x2ca <main+0x38>
 2c8:	62 c0       	rjmp	.+196    	; 0x38e <main+0xfc>
 2ca:	08 f4       	brcc	.+2      	; 0x2ce <main+0x3c>
 2cc:	49 c0       	rjmp	.+146    	; 0x360 <main+0xce>
 2ce:	86 30       	cpi	r24, 0x06	; 6
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x42>
 2d2:	74 c0       	rjmp	.+232    	; 0x3bc <main+0x12a>
 2d4:	ec cf       	rjmp	.-40     	; 0x2ae <main+0x1c>
		{
			case AND:
				BlockInfo();
 2d6:	cc df       	rcall	.-104    	; 0x270 <BlockInfo>
				while(mode == AND)
 2d8:	10 c0       	rjmp	.+32     	; 0x2fa <main+0x68>
				{
					GetResult(LogicElementAND(BUTTONX1,BUTTONX2), "Selected:AND");
 2da:	66 b3       	in	r22, 0x16	; 22
 2dc:	86 b3       	in	r24, 0x16	; 22
 2de:	66 95       	lsr	r22
 2e0:	66 95       	lsr	r22
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	69 27       	eor	r22, r25
 2e6:	61 70       	andi	r22, 0x01	; 1
 2e8:	86 95       	lsr	r24
 2ea:	89 27       	eor	r24, r25
 2ec:	81 70       	andi	r24, 0x01	; 1
 2ee:	4b df       	rcall	.-362    	; 0x186 <LogicElementAND>
 2f0:	6a e7       	ldi	r22, 0x7A	; 122
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	c1 df       	rcall	.-126    	; 0x27a <GetResult>
					InicializationButton();
 2f8:	9c df       	rcall	.-200    	; 0x232 <InicializationButton>
		InicializationButton();		
		switch (mode)
		{
			case AND:
				BlockInfo();
				while(mode == AND)
 2fa:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	61 f3       	breq	.-40     	; 0x2da <main+0x48>
 302:	d5 cf       	rjmp	.-86     	; 0x2ae <main+0x1c>
					GetResult(LogicElementAND(BUTTONX1,BUTTONX2), "Selected:AND");
					InicializationButton();
				}
			break;
			case OR:
			BlockInfo();
 304:	b5 df       	rcall	.-150    	; 0x270 <BlockInfo>
			while(mode == OR)
 306:	10 c0       	rjmp	.+32     	; 0x328 <main+0x96>
			{
				GetResult(LogicElementOR(BUTTONX1,BUTTONX2), "Selected:OR");
 308:	66 b3       	in	r22, 0x16	; 22
 30a:	86 b3       	in	r24, 0x16	; 22
 30c:	66 95       	lsr	r22
 30e:	66 95       	lsr	r22
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	69 27       	eor	r22, r25
 314:	61 70       	andi	r22, 0x01	; 1
 316:	86 95       	lsr	r24
 318:	89 27       	eor	r24, r25
 31a:	81 70       	andi	r24, 0x01	; 1
 31c:	3e df       	rcall	.-388    	; 0x19a <LogicElementOR>
 31e:	67 e8       	ldi	r22, 0x87	; 135
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	aa df       	rcall	.-172    	; 0x27a <GetResult>
				InicializationButton();
 326:	85 df       	rcall	.-246    	; 0x232 <InicializationButton>
					InicializationButton();
				}
			break;
			case OR:
			BlockInfo();
			while(mode == OR)
 328:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	61 f3       	breq	.-40     	; 0x308 <main+0x76>
 330:	be cf       	rjmp	.-132    	; 0x2ae <main+0x1c>
				GetResult(LogicElementOR(BUTTONX1,BUTTONX2), "Selected:OR");
				InicializationButton();
			}
			break;
			case NAND:
			BlockInfo();
 332:	9e df       	rcall	.-196    	; 0x270 <BlockInfo>
			while(mode == NAND)
 334:	10 c0       	rjmp	.+32     	; 0x356 <main+0xc4>
			{
				GetResult(LogicElementNAND(BUTTONX1,BUTTONX2), "Selected:NAND");
 336:	66 b3       	in	r22, 0x16	; 22
 338:	86 b3       	in	r24, 0x16	; 22
 33a:	66 95       	lsr	r22
 33c:	66 95       	lsr	r22
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	69 27       	eor	r22, r25
 342:	61 70       	andi	r22, 0x01	; 1
 344:	86 95       	lsr	r24
 346:	89 27       	eor	r24, r25
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	31 df       	rcall	.-414    	; 0x1ae <LogicElementNAND>
 34c:	63 e9       	ldi	r22, 0x93	; 147
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	93 df       	rcall	.-218    	; 0x27a <GetResult>
				InicializationButton();
 354:	6e df       	rcall	.-292    	; 0x232 <InicializationButton>
				InicializationButton();
			}
			break;
			case NAND:
			BlockInfo();
			while(mode == NAND)
 356:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	61 f3       	breq	.-40     	; 0x336 <main+0xa4>
 35e:	a7 cf       	rjmp	.-178    	; 0x2ae <main+0x1c>
				GetResult(LogicElementNAND(BUTTONX1,BUTTONX2), "Selected:NAND");
				InicializationButton();
			}
			break;
			case NOR:
			BlockInfo();
 360:	87 df       	rcall	.-242    	; 0x270 <BlockInfo>
			while(mode == NOR)
 362:	10 c0       	rjmp	.+32     	; 0x384 <main+0xf2>
			{
				GetResult(LogicElementNOR(BUTTONX1,BUTTONX2), "Selected:NOR");
 364:	66 b3       	in	r22, 0x16	; 22
 366:	86 b3       	in	r24, 0x16	; 22
 368:	66 95       	lsr	r22
 36a:	66 95       	lsr	r22
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	69 27       	eor	r22, r25
 370:	61 70       	andi	r22, 0x01	; 1
 372:	86 95       	lsr	r24
 374:	89 27       	eor	r24, r25
 376:	81 70       	andi	r24, 0x01	; 1
 378:	24 df       	rcall	.-440    	; 0x1c2 <LogicElementNOR>
 37a:	61 ea       	ldi	r22, 0xA1	; 161
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	7c df       	rcall	.-264    	; 0x27a <GetResult>
				InicializationButton();
 382:	57 df       	rcall	.-338    	; 0x232 <InicializationButton>
				InicializationButton();
			}
			break;
			case NOR:
			BlockInfo();
			while(mode == NOR)
 384:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 388:	84 30       	cpi	r24, 0x04	; 4
 38a:	61 f3       	breq	.-40     	; 0x364 <main+0xd2>
 38c:	90 cf       	rjmp	.-224    	; 0x2ae <main+0x1c>
				GetResult(LogicElementNOR(BUTTONX1,BUTTONX2), "Selected:NOR");
				InicializationButton();
			}
			break;
			case XOR:
			BlockInfo();
 38e:	70 df       	rcall	.-288    	; 0x270 <BlockInfo>
			while(mode == XOR)
 390:	10 c0       	rjmp	.+32     	; 0x3b2 <main+0x120>
			{
				GetResult(LogicElementXOR(BUTTONX1,BUTTONX2), "Selected:XOR");
 392:	66 b3       	in	r22, 0x16	; 22
 394:	86 b3       	in	r24, 0x16	; 22
 396:	66 95       	lsr	r22
 398:	66 95       	lsr	r22
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	69 27       	eor	r22, r25
 39e:	61 70       	andi	r22, 0x01	; 1
 3a0:	86 95       	lsr	r24
 3a2:	89 27       	eor	r24, r25
 3a4:	81 70       	andi	r24, 0x01	; 1
 3a6:	16 df       	rcall	.-468    	; 0x1d4 <LogicElementXOR>
 3a8:	6e ea       	ldi	r22, 0xAE	; 174
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	65 df       	rcall	.-310    	; 0x27a <GetResult>
				InicializationButton();
 3b0:	40 df       	rcall	.-384    	; 0x232 <InicializationButton>
				InicializationButton();
			}
			break;
			case XOR:
			BlockInfo();
			while(mode == XOR)
 3b2:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	61 f3       	breq	.-40     	; 0x392 <main+0x100>
 3ba:	79 cf       	rjmp	.-270    	; 0x2ae <main+0x1c>
				GetResult(LogicElementXOR(BUTTONX1,BUTTONX2), "Selected:XOR");
				InicializationButton();
			}
			break;	
			case XNOR:
				BlockInfo();
 3bc:	59 df       	rcall	.-334    	; 0x270 <BlockInfo>
				while(mode == XNOR)
 3be:	10 c0       	rjmp	.+32     	; 0x3e0 <main+0x14e>
				{
					GetResult(LogicElementXNOR(BUTTONX1,BUTTONX2), "Selected:XNOR");
 3c0:	66 b3       	in	r22, 0x16	; 22
 3c2:	86 b3       	in	r24, 0x16	; 22
 3c4:	66 95       	lsr	r22
 3c6:	66 95       	lsr	r22
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	69 27       	eor	r22, r25
 3cc:	61 70       	andi	r22, 0x01	; 1
 3ce:	86 95       	lsr	r24
 3d0:	89 27       	eor	r24, r25
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	0e df       	rcall	.-484    	; 0x1f2 <LogicElementXNOR>
 3d6:	6b eb       	ldi	r22, 0xBB	; 187
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	4e df       	rcall	.-356    	; 0x27a <GetResult>
					InicializationButton();
 3de:	29 df       	rcall	.-430    	; 0x232 <InicializationButton>
				InicializationButton();
			}
			break;	
			case XNOR:
				BlockInfo();
				while(mode == XNOR)
 3e0:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <mode>
 3e4:	86 30       	cpi	r24, 0x06	; 6
 3e6:	61 f3       	breq	.-40     	; 0x3c0 <main+0x12e>
 3e8:	62 cf       	rjmp	.-316    	; 0x2ae <main+0x1c>

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
